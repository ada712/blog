(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{605:function(s,t,e){"use strict";e.r(t);var a=e(2),r=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("如标题所示，这是一道大厂面试官普遍钟爱的面试题。要想答出 Node 中的 Event-Loop 和浏览器有啥区别，首先你得能说清楚，Node 中的 Event-Loop 本身是怎么一回事。")]),s._v(" "),t("h2",{attrs:{id:"node技术架构分析-认识-libuv"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node技术架构分析-认识-libuv"}},[s._v("#")]),s._v(" Node技术架构分析-认识 libuv")]),s._v(" "),t("p",[s._v("这里我为大家画了一张简化的 Node 架构图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img1.sycdn.imooc.com/5ec64b4c0001171408600626.png",alt:"图片描述"}})]),s._v(" "),t("p",[s._v("Node整体上由这三部分组成：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("应用层：这一层就是大家最熟悉的 Node.js 代码，包括 Node 应用以及一些标准库。")])]),s._v(" "),t("li",[t("p",[s._v("桥接层：Node 底层是用 C++ 来实现的。桥接层负责封装底层依赖的 C++ 模块的能力，将其简化为 API 向应用层提供服务。")])]),s._v(" "),t("li",[t("p",[s._v("底层依赖：这里就是最最底层的 C++ 库了，支撑 Node 运行的最基本能力在此汇聚。其中需要特别引起大家注意的就是 V8 和 libuv：")]),s._v(" "),t("ul",[t("li",[s._v("V8 是 JS 的运行引擎，它负责把 JavaScript 代码转换成 C++，然后去跑这层 C++ 代码。")]),s._v(" "),t("li",[t("strong",[s._v("libuv：它对跨平台的异步I/O能力进行封装，同时也是我们本节的主角：Node 中的事件循环就是由 libuv 来初始化的。")])])])])]),s._v(" "),t("p",[s._v("注意哈：这里第一个区别来了——浏览器的 Event-Loop 由各个浏览器自己实现；而 Node 的 Event-Loop 由 libuv 来实现。")]),s._v(" "),t("h2",{attrs:{id:"libuv中的-event-loop-实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#libuv中的-event-loop-实现"}},[s._v("#")]),s._v(" libuv中的 Event-Loop 实现")]),s._v(" "),t("p",[s._v("libuv 主导循环机制共有六个循环阶段。这里我引用 Node 官方（出处："),t("a",{attrs:{href:"https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/"),t("OutboundLink")],1),s._v("）的一张图给大家作说明：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img1.sycdn.imooc.com/5ec64bbf0001476c15300928.png",alt:"图片描述"}})]),s._v(" "),t("p",[s._v("（注：Node 官方给出的这张图非常值得参考，不过不建议大家直接通过阅读其官方文档来理解事件循环，一些表达还是会相对比较生涩，打击积极性）。")]),s._v(" "),t("p",[s._v("我们先来瞅瞅这六个阶段各是处理什么任务的：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("timers阶段")]),s._v("：执行 setTimeout 和 setInterval 中定义的回调；")]),s._v(" "),t("li",[t("strong",[s._v("pending callbacks")]),s._v("：直译过来是“被挂起的回调”，如果网络I/O或者文件I/O的过程中出现了错误，就会在这个阶段处理错误的回调（比较少见，可以略过）；")]),s._v(" "),t("li",[t("strong",[s._v("idle, prepare")]),s._v("：仅系统内部使用。这个阶段我们开发者不需要操心。（可以略过）；")]),s._v(" "),t("li",[t("strong",[s._v("poll （轮询阶段）")]),s._v("：重点阶段，这个阶段会执行I/O回调，同时还会检查定时器是否到期；")]),s._v(" "),t("li",[t("strong",[s._v("check（检查阶段）")]),s._v("：处理 setImmediate 中定义的回调；")]),s._v(" "),t("li",[t("strong",[s._v("close callbacks")]),s._v("：处理一些“关闭”的回调，比如"),t("code",[s._v("socket.on('close', ...)")]),s._v("就会在这个阶段被触发。")])]),s._v(" "),t("h2",{attrs:{id:"宏任务与微任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏任务与微任务"}},[s._v("#")]),s._v(" 宏任务与微任务")]),s._v(" "),t("p",[s._v("和浏览器中一样，Node 世界里也有宏任务与微任务之分。划分依据与我们上文描述的其实是一致的：")]),s._v(" "),t("blockquote",[t("p",[s._v("常见的 macro-task 比如： setTimeout、setInterval、 setImmediate、 script（整体代码）、I/O 操作、UI 渲染等。")]),s._v(" "),t("p",[s._v("常见的 micro-task 比如: process.nextTick、Promise、MutationObserver 等")])]),s._v(" "),t("p",[s._v("需要注意的是，setImmediate 和 process.nextTick 是 Node 独有的，在本节各位会有充分的机会和它们打交道。")]),s._v(" "),t("h2",{attrs:{id:"一起走一遍-node-中的事件循环流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一起走一遍-node-中的事件循环流程"}},[s._v("#")]),s._v(" 一起走一遍 Node 中的事件循环流程")]),s._v(" "),t("p",[s._v("在这六个阶段中，大家需要重点关注的就是 "),t("strong",[s._v("timers、poll 和 check")]),s._v(" 这 三个阶段，相关的命题也基本上是围绕它们来做文章。不过在进行考点点拨之前，我们还是要把整个循环的流程给走一遍：")]),s._v(" "),t("ol",[t("li",[s._v("执行全局的 Script 代码（与浏览器无差）；")]),s._v(" "),t("li",[s._v("把微任务队列清空：注意，Node 清空微任务队列的手法比较特别。在浏览器中，我们只有一个微任务队列需要接受处理；但在 Node 中，有两类微任务队列：next-tick 队列和其它队列。其中这个 next-tick 队列，专门用来收敛 process.nextTick 派发的异步任务。"),t("strong",[s._v("在清空队列时，优先清空 next-tick 队列中的任务，随后才会清空其它微任务")]),s._v("；")]),s._v(" "),t("li",[s._v("开始执行 macro-task（宏任务）。注意，Node 执行宏任务的方式与浏览器不同：在浏览器中，我们每次出队并执行一个宏任务；而在 Node 中，我们每次会尝试清空当前阶段对应宏任务队列里的所有任务（除非达到了系统限制）；")]),s._v(" "),t("li",[s._v("步骤3开始，会进入 3 -> 2 -> 3 -> 2…的循环（整体过程如下所示）:")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("micro"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("task"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" timers"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue \n                            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\nmicro"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("task"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" pending"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue\n                            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\nmicro"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("task"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  polling"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue\n                            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\nmicro"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("task"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  check"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue\n                            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\nmicro"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("task"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  close"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue\n                            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n                            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\nmicro"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("task"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" timers"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("queue \n\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("​")]),s._v(" "),t("p",[s._v("整体来看，Node 中每次执行异步任务都是以批量的形式，“一队一队”地执行。循环形式为：宏任务队列 -> 微任务队列 -> 宏任务队列 —> 微任务队列… 这样交替进行。")]),s._v(" "),t("p",[s._v("经过咱们上面这一通讲，相信把 Node 和浏览器之间不同的 Event-Loop 机制捋清楚，对现在的你来说已经不是什么难事了。")]),s._v(" "),t("p",[s._v("不过，可别高兴得太早。事件循环这块，比起问答题，更常见的是编码阅读题。咱们下面就一起来通过一系列的真题巩固一下认知。")])])}),[],!1,null,null,null);t.default=r.exports}}]);