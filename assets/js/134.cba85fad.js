(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{616:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("本节我们给大家补充一些 Vue 相关的经典面试真题。")]),s._v(" "),t("p",[s._v("大家知道，Vue 的面试题要真是收集起来，那可真够五花八门。本节涉及的题目可谓“沙里淘金”，同时具备了“频率高”、“区分度高”两个特性，普遍具有稳定的话题热度，能够确实反映一些知识结构、知识深度上问题。")]),s._v(" "),t("h2",{attrs:{id:"请尝试描述-vue-的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请尝试描述-vue-的生命周期"}},[s._v("#")]),s._v(" 请尝试描述 Vue 的生命周期")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img1.sycdn.imooc.com/5ed7855b0001d09112003039.png",alt:"图片描述"}})]),s._v(" "),t("p",[s._v("（图源 Vue 官网）")]),s._v(" "),t("p",[s._v("生命周期，就是指实例从创建到销毁的过程。这里我制作了一张思维导图来帮助大家记忆每个环节的特性：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img1.sycdn.imooc.com/5ed7856900017bd916281170.png",alt:"图片描述"}})]),s._v(" "),t("h3",{attrs:{id:"keep-alive-与生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive-与生命周期"}},[s._v("#")]),s._v(" keep-alive 与生命周期")]),s._v(" "),t("p",[s._v("keep-alive是 Vue 提供的一个内置组件，用来对组件进行缓存——在组件切换过程中将状态保留在内存中，防止重复渲染DOM。")]),s._v(" "),t("p",[s._v("如果你为一个组件包裹了 keep-alive，那么它会多出两个生命周期：deactivated、actived。同时，beforeDestroy 和 destroyed 就不会再被触发了——毕竟组件不会被真正销毁。")]),s._v(" "),t("p",[s._v("当组件被换掉时，会被缓存到内存中、触发 deactivated 生命周期；当组件被切回来时，再去缓存里找这个组件、触发 actived。")]),s._v(" "),t("p",[s._v("​")]),s._v(" "),t("h2",{attrs:{id:"vue-的路由有哪些模式-说说你对前端路由的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-的路由有哪些模式-说说你对前端路由的理解"}},[s._v("#")]),s._v(" Vue 的路由有哪些模式？说说你对前端路由的理解？")]),s._v(" "),t("p",[s._v("熟悉 vue-router 的同学都知道，Vue 路由有三种模式：hash、history 和 abstract：")]),s._v(" "),t("ul",[t("li",[s._v("hash: 使用 URL hash 值来作路由。支持所有浏览器；")]),s._v(" "),t("li",[s._v("history : 需要 HTML5 History API 和服务器配置结合。对浏览器版本有要求，不支持低版本浏览器；")]),s._v(" "),t("li",[s._v("abstract : 支持所有 JavaScript 运行环境。如果当前环境没有浏览器 API，路由会自动进入这个模式.")])]),s._v(" "),t("p",[s._v("这里我们需要关注的是前两种。其实这种机制并非 Vue 独有，它来源于现在业界广为大家接受的前端路由方案思路。当面试官问你这个问题的时候，他想听到的肯定不只是一个单薄的“hash and history”，而是希望挖掘你对 SPA 局限性、前端路由实现原理的理解。")]),s._v(" "),t("h3",{attrs:{id:"理解前端路由-是什么-解决什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#理解前端路由-是什么-解决什么问题"}},[s._v("#")]),s._v(" 理解前端路由——是什么？解决什么问题？")]),s._v(" "),t("h4",{attrs:{id:"背景-问题的产生"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#背景-问题的产生"}},[s._v("#")]),s._v(" 背景——问题的产生")]),s._v(" "),t("p",[s._v("在前端技术早期，一个 url 对应一个页面，如果你要从 A 页面切换到 B 页面，那么必然伴随着页面的刷新。")]),s._v(" "),t("p",[s._v("这个体验并不好，不过在最初也是无奈之举——用户只有在刷新页面的情况下，才可以重新去请求数据。")]),s._v(" "),t("p",[s._v("后来，改变发生了——Ajax 出现了，它允许人们在不刷新页面的情况下发起请求；与之共生的，还有“不刷新页面即可更新页面内容”这种需求。在这样的背景下，出现了 "),t("strong",[s._v("SPA（单页面应用")]),s._v("）。")]),s._v(" "),t("p",[s._v("SPA极大地提升了用户体验，它允许页面在不刷新的情况下更新页面内容，使内容的切换更加流畅。但是在 SPA 诞生之初，人们并没有考虑到“定位”这个问题——在内容切换前后，页面的 URL 都是一样的，这就带来了两个问题：")]),s._v(" "),t("ul",[t("li",[s._v("SPA 其实并不知道当前的页面“进展到了哪一步”。可能你在一个站点下经过了反复的“前进”才终于唤出了某一块内容，但是此时只要刷新一下页面，一切就会被清零，你必须重复之前的操作、才可以重新对内容进行定位——SPA 并不会“记住”你的操作。")]),s._v(" "),t("li",[s._v("由于有且仅有一个 URL 给页面做映射，这对 SEO 也不够友好，搜索引擎无法收集全面的信息")])]),s._v(" "),t("p",[s._v("为了解决这个问题，前端路由出现了。")]),s._v(" "),t("h4",{attrs:{id:"前端路由-spa-定位-解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端路由-spa-定位-解决方案"}},[s._v("#")]),s._v(" 前端路由——SPA“定位”解决方案")]),s._v(" "),t("p",[s._v("前端路由可以帮助我们在仅有一个页面的情况下，“记住”用户当前走到了哪一步——为 SPA 中的各个视图匹配一个唯一标识。这意味着用户前进、后退触发的新内容，都会映射到不同的 URL 上去。此时即便他刷新页面，因为当前的 URL 可以标识出他所处的位置，因此内容也不会丢失。")]),s._v(" "),t("p",[s._v("​")]),s._v(" "),t("p",[s._v("那么如何实现这个目的呢？首先我们要解决两个问题：")]),s._v(" "),t("ul",[t("li",[s._v("当用户刷新页面时，浏览器会默认根据当前 URL 对资源进行重新定位（发送请求）。这个动作对 SPA 是不必要的，因为我们的 SPA 作为单页面，无论如何也只会有一个资源与之对应。此时若走正常的请求-刷新流程，反而会使用户的前进后退操作无法被记录。")]),s._v(" "),t("li",[s._v("单页面应用对服务端来说，就是一个URL、一套资源，那么如何做到用“不同的URL”来映射不同的视图内容呢？")])]),s._v(" "),t("p",[s._v("从这两个问题来看，服务端已经完全救不了这个场景了。所以要靠咱们前端自力更生，不然怎么叫“前端路由”呢？作为前端，我们可以提供这样的解决思路：")]),s._v(" "),t("ul",[t("li",[s._v("拦截用户的刷新操作，避免服务端盲目响应、返回不符合预期的资源内容。把刷新这个动作完全放到前端逻辑里消化掉。")]),s._v(" "),t("li",[s._v("感知 URL 的变化。这里不是说要改造 URL、凭空制造出 N 个 URL 来。而是说 URL 还是那个 URL，只不过我们可以给它做一些微小的处理——这些处理并不会影响 URL 本身的性质，不会影响服务器对它的识别，只有我们前端感知的到。一旦我们感知到了，我们就根据这些变化、用 JS 去给它生成不同的内容。")])]),s._v(" "),t("h3",{attrs:{id:"实践思路-hash-与-history"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实践思路-hash-与-history"}},[s._v("#")]),s._v(" 实践思路——hash 与 history")]),s._v(" "),t("p",[s._v("接下来重点就来了，现在前端界对前端路由有哪些实现思路？这里大家需要掌握的两个实践就是 hash 与 history。")]),s._v(" "),t("h4",{attrs:{id:"hash-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash-模式"}},[s._v("#")]),s._v(" hash 模式")]),s._v(" "),t("p",[s._v("hash 模式是指通过改变 URL 后面以“#”分隔的字符串（这货其实就是 URL 上的哈希值）、从而让页面感知到路由变化的一种实现方式。举个例子，比如这样的一个 URL ：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[s._v("www.imooc.com")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[s._v("/")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("我就可以通过增加和改变哈希值，来让这个 URL 变得有那么一点点不一样：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 主页")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("www"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("imooc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("#index\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 活动页")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("https")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("www"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("imooc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("#activePage\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这个“不一样”是我们前端完全可感知的——JS 可以帮我们捕获到哈希值的内容。在 hash 模式下，我们实现路由的思路可以概括如下：")]),s._v(" "),t("ol",[t("li",[s._v("hash 的改变：我们可以通过 location 暴露出来的属性，直接去修改当前 URL 的 hash 值：")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("window"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("location"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hash "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'index'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ol",[t("li",[s._v("hash 的感知：通过监听 “hashchange”事件，我们可以用 JS 来捕捉 hash 值的变化，进而决定我们页面内容是否需要更新：")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 监听hash变化，点击浏览器的前进后退会触发")]),s._v("\nwindow"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addEventListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hashchange'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("event")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 根据 hash 的变化更新内容")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h4",{attrs:{id:"history-模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#history-模式"}},[s._v("#")]),s._v(" history 模式")]),s._v(" "),t("p",[s._v("大家知道，在我们浏览器的左上角，往往有这样的操作点：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img1.sycdn.imooc.com/5ed785810001b12a04260300.png",alt:"图片描述"}})]),s._v(" "),t("p",[s._v("通过点击前进后退箭头，我们可以实现页面间的跳转。这样的行为，其实是可以通过 API 来实现的。")]),s._v(" "),t("p",[s._v("浏览器的 history API 赋予了我们这样的能力，在 HTML4 时，我们就可以通过下面的接口来操作浏览历史、实现跳转动作：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("window"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("history"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forward")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前进到下一页")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("window"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("history"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("back")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 后退到上一页")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("window"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("history"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("go")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前进两页")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("window"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("history"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("go")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 后退两页")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("很有趣吧？遗憾的是，在这个阶段，我们能做的只是“切换”，而不能“改变”。好在从 HTML5 开始，浏览器支持了 pushState 和 replaceState 两个 API，允许我们对浏览历史进行修改和新增：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("history"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pushState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("title"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 向浏览历史中追加一条记录")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("history"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("replaceState")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("title"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("url"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 修改（替换）当前页在浏览历史中的信息")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这样一来，修改动作就齐活了了。")]),s._v(" "),t("p",[s._v("有修改，就要有对修改的感知能力。在 history 模式下，我们可以通过监听 popstate 事件来达到我们的目的：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("window"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("addEventListener")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'popstate'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("e")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("每当浏览历史发生变化，popstate 事件都会被触发。"),t("strong",[s._v("注意这里有个坑")]),s._v("：go、forward 和 back 等方法的调用确实会触发 popstate，但是 "),t("strong",[s._v("pushState 和 replaceState 不会")]),s._v("。")]),s._v(" "),t("p",[s._v("这个缺憾问题也不大，我们一般通过自定义事件（可复习我们前面的事件专题）和全局事件总线（后续设计模式专题会讲解）来实现。")]),s._v(" "),t("p",[t("strong",[s._v("注意：上述 history API 均不会导致页面的刷新。")])]),s._v(" "),t("h2",{attrs:{id:"说说你对-mvvm-的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#说说你对-mvvm-的理解"}},[s._v("#")]),s._v(" 说说你对 MVVM 的理解")]),s._v(" "),t("p",[s._v("mvvm 是一种架构模式。传统MVC导致的前端逻辑冗余的问题，本质原因是Model -> View可以直接通信，导致前端承载了过多的Model加工处理逻辑。在 mvvm 架构模式下，不存在这种问题：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img1.sycdn.imooc.com/5ed7858c0001a54012800664.png",alt:"图片描述"}})]),s._v(" "),t("p",[s._v("这是 Vue 的 mvvm 示意图，其中，这三个角色大家要认清楚：")]),s._v(" "),t("ul",[t("li",[s._v("View 层：视图层，对应到 "),t("code",[s._v("<template>")]),s._v(" 标签的内容。")]),s._v(" "),t("li",[s._v("VM 层：View-Model，对应到 Vue 实例。这一层是 View 和 Model 间的媒介。当用户操作通过 View 修改 View-Model 层的数据后，View-Model 会去修改 Model，然后再反过来把修改后的数据映射到 View 层上去。")]),s._v(" "),t("li",[s._v("Model 层： 模型层，其实就是数据层。它对应到 Vue 中的数据。这个数据并非一个固定的实体，它可以代指 data 属性，也可以代指 Vuex 提供的数据，总之，它是页面所依赖的 JS 数据对象。")])]),s._v(" "),t("p",[s._v("MVVM模型的关键，在于View的变化会直接映射在 ViewModel 中（反之亦然）。这个映射的过程不需要你手动实现，而是 MVVM 框架来帮你做掉。")]),s._v(" "),t("p",[s._v("这样一来，开发者开发 View 中的显示逻辑和 View-Model 中调用model的业务逻辑可以隔离的非常好，不需要在View 中还去维护一块和 ViewModel 间的逻辑。")]),s._v(" "),t("p",[s._v("“隔离”意味着什么？没错，就是解耦合！不同的人写不同的代码，彼此井水不犯河水。进而达到的就是关注点分离——负责业务逻辑的开发人员不需要关心显示细节，负责显示逻辑的人不需要关心业务逻辑细节，项目复杂度由此大大降低。")])])}),[],!1,null,null,null);t.default=n.exports}}]);