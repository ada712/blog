(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{642:function(s,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("题目预览")]),s._v(" "),t("p",[s._v("编程题")]),s._v(" "),t("p",[s._v("实现二叉树后序遍历")]),s._v(" "),t("p",[s._v("详细描述")]),s._v(" "),t("p",[s._v("给定一个二叉树，返回后序遍历")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 数据结构")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Tree")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("val")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" number"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("left")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("right")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("输入输出描述")]),s._v(" "),t("p",[s._v("输入描述")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("输出描述")]),s._v(" "),t("p",[s._v("[5, 2, 6, 7, 3, 1]")]),s._v(" "),t("p",[s._v("题目解析")]),s._v(" "),t("p",[s._v("递归实现")]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前序遍历:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("preorderTraversal")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("preorderTraversal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("preorderTraversal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 中序遍历:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("inorderTraversal")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("inorderTraversal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("inorderTraversal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 后序遍历:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("postorderTraversal")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("postorderTraversal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("postorderTraversal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("push")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tree"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("val"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" res"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("题目预览")]),s._v(" "),t("p",[s._v("编程题")]),s._v(" "),t("p",[s._v("数组-搜索插入位置")]),s._v(" "),t("p",[s._v("详细描述")]),s._v(" "),t("p",[s._v("给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。")]),s._v(" "),t("p",[s._v("你可以假设数组中无重复元素。")]),s._v(" "),t("p",[t("strong",[s._v("示例 1:")])]),s._v(" "),t("p",[t("strong",[s._v("输入:")])]),s._v(" "),t("p",[s._v("[1,3,5,6], 5")]),s._v(" "),t("p",[t("strong",[s._v("输出:")])]),s._v(" "),t("p",[s._v("2")]),s._v(" "),t("p",[t("strong",[s._v("示例 2:")])]),s._v(" "),t("p",[t("strong",[s._v("输入:")])]),s._v(" "),t("p",[s._v("[1,3,5,6], 2")]),s._v(" "),t("p",[t("strong",[s._v("输出:")])]),s._v(" "),t("p",[s._v("1")]),s._v(" "),t("p",[s._v("输入输出描述")]),s._v(" "),t("p",[s._v("输入描述")]),s._v(" "),t("p",[t("strong",[s._v("示例 1中数组存在元素5，则返回5的索引为2，故输出2；")])]),s._v(" "),t("p",[t("strong",[s._v("示例 2中数组不存在元素2，元素2插入的位置应该是元素1后面，索引为1，故输出1；")])]),s._v(" "),t("p",[s._v("题目预览")]),s._v(" "),t("p",[s._v("编程题")]),s._v(" "),t("p",[s._v("使用js实现一个二分查找，要求不适用递归")]),s._v(" "),t("p",[s._v("详细描述")]),s._v(" "),t("p",[s._v("二分法查找，也称折半查找，是一种在有序数组中查找特定元素的搜索算法")]),s._v(" "),t("p",[s._v("输入输出描述")]),s._v(" "),t("p",[s._v("输入描述")]),s._v(" "),t("p",[s._v("[1,2,3,5,6,7,8,9,10,13,22,48,76] 和 13")]),s._v(" "),t("p",[s._v("输出描述")]),s._v(" "),t("p",[s._v("9")]),s._v(" "),t("p",[s._v("题目解析")]),s._v(" "),t("p",[s._v("​    function binary_search(arr, key) {")]),s._v(" "),t("p",[s._v("​      var low = 0,")]),s._v(" "),t("p",[s._v("​        high = arr.length - 1;")]),s._v(" "),t("p",[s._v("​      while(low <= high){")]),s._v(" "),t("p",[s._v("​        var mid = parseInt((high + low) / 2);")]),s._v(" "),t("p",[s._v("​        if(key == arr[mid]){")]),s._v(" "),t("p",[s._v("​          return  mid;")]),s._v(" "),t("p",[s._v("​        }else if(key > arr[mid]){")]),s._v(" "),t("p",[s._v("​          low = mid + 1;")]),s._v(" "),t("p",[s._v("​        }else if(key < arr[mid]){")]),s._v(" "),t("p",[s._v("​          high = mid -1;")]),s._v(" "),t("p",[s._v("​        }else{")]),s._v(" "),t("p",[s._v("​          return -1;")]),s._v(" "),t("p",[s._v("​        }")]),s._v(" "),t("p",[s._v("​      }")]),s._v(" "),t("p",[s._v("​    };")]),s._v(" "),t("p",[s._v("​    var arr = [1,2,3,5,6,7,8,9,10,13,22,48,76];")]),s._v(" "),t("p",[s._v("​    var result = binary_search(arr,13);")]),s._v(" "),t("p",[s._v("题目预览")]),s._v(" "),t("p",[s._v("编程题")]),s._v(" "),t("p",[s._v("实现一个函数的 compose 方法？")]),s._v(" "),t("p",[s._v("详细描述")]),s._v(" "),t("p",[s._v("compose 是函数式变成中的一个重要的函数，作用就是用于组合函数，将多个函数串联起来使用。")]),s._v(" "),t("p",[s._v("输入输出描述")]),s._v(" "),t("p",[s._v("输入描述")]),s._v(" "),t("p",[s._v("比如我们数字先求和，再求平方")]),s._v(" "),t("p",[s._v("const sum = (a, b) => a + b")]),s._v(" "),t("p",[s._v("const square = c => c * c")]),s._v(" "),t("p",[s._v("const fn = compose(sum, square)")]),s._v(" "),t("p",[s._v("fn(3,4) // 49")]),s._v(" "),t("p",[s._v("输出描述")]),s._v(" "),t("p",[s._v("compose 函数作用")]),s._v(" "),t("p",[s._v("1 compose 参数是函数，返回也是一个函数")]),s._v(" "),t("p",[s._v("2 除了第一个函数接受参数，其他函数的接收都是上一个函数的返回值，所以初始函数的参数可能是多元的。")]),s._v(" "),t("p",[s._v("\\3. 它可以接收任意的参数，所有的的参数都是函数，且执行方法向是自左向右，初始函数一定在参数的最左边。")]),s._v(" "),t("p",[s._v("题目解析")]),s._v(" "),t("p",[s._v("可以采用递归的方式")]),s._v(" "),t("p",[s._v("可以使用while循环")]),s._v(" "),t("p",[s._v("题目预览")]),s._v(" "),t("p",[s._v("编程题")]),s._v(" "),t("p",[s._v("实现一个EventEmitter类")]),s._v(" "),t("p",[s._v("详细描述")]),s._v(" "),t("p",[s._v("该类需要暴露以下方法")]),s._v(" "),t("p",[s._v("1、listen(event: string, fun: Function)  // 注册。同一个事件可以注册多个监听函数，事件触发后按注册时间依次运行；同一个监听函数在同一事件上只能响应一次")]),s._v(" "),t("p",[s._v("2、unlisten(event: string, fun: Function) // 解绑")]),s._v(" "),t("p",[s._v("3、emmit(event: string) // 触发")]),s._v(" "),t("p",[s._v("4、once(event: string, fun: Function) // 只响应一次的注册函数。选做")]),s._v(" "),t("p",[s._v("输入输出描述")]),s._v(" "),t("p",[s._v("备注")]),s._v(" "),t("p",[s._v("1、listen方法需要对监听函数进行去重")]),s._v(" "),t("p",[s._v("2、unlisten和emmit都要判断事件未注册的情况")])])}),[],!1,null,null,null);t.default=r.exports}}]);