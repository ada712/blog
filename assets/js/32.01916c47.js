(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{501:function(t,a,s){"use strict";s.r(a);var e=s(2),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"设置默认分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置默认分支"}},[t._v("#")]),t._v(" 设置默认分支")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("git config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defaultBranch master\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"git-多项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-多项目"}},[t._v("#")]),t._v(" git 多项目")]),t._v(" "),a("p",[t._v('ssh-keygen -t rsa -C "xxx@xxx.com"')]),t._v(" "),a("p",[t._v("abc_id-rsa")]),t._v(" "),a("p",[t._v("查看已经添加的私钥")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("l\n\n$ ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("agent bash\n$ ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("github_id_rsa\n$ ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("gitlabnei_id_rsa\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项：")]),t._v(" "),a("ol",[a("li",[t._v("必须：pull release 代码或其他人的分支后，如果有冲突解决后，需要先 commit 一次；然后再做逻辑修改，不然")])]),t._v(" "),a("ul",[a("li",[t._v("别人根本没法review自己的代码，都混在一个commit没法看")]),t._v(" "),a("li",[t._v("回滚不好操作：找到commit前一个版本，reset --hard commit_id 回去，去除改动，git checkout -b new_branch，这个新分支是没有包含错误的commit的，再pull release，commit 一遍，再加自己代码（考虑搬运成本），再commit一遍；")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("必须：不要用 force 覆盖")])]),t._v(" "),a("p",[t._v("其他：")]),t._v(" "),a("ol",[a("li",[t._v("建议：不要用IDE自动格式化go代码")]),t._v(" "),a("li",[t._v("必须：二进制不要提交")]),t._v(" "),a("li",[t._v("建议：解决冲突后 Commit 后可以选择不要加 -m")]),t._v(" "),a("li",[t._v("建议：冲突的处理如果IDE解决不熟练，用命令行")])]),t._v(" "),a("h2",{attrs:{id:"_1-远程分支推送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-远程分支推送"}},[t._v("#")]),t._v(" 1. 远程分支推送")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("关联远程分支："),a("code",[t._v("git remote add origin https://github.com/benson-lin/algorithm.git")])])]),t._v(" "),a("li",[a("p",[t._v("远程先开好分支然后拉到本地："),a("code",[t._v("git checkout -b feature-branch origin/feature-branch //检出远程的feature-branch分支到本地")])])]),t._v(" "),a("li",[a("p",[t._v("本地先开好分支然后推送到远程："),a("code",[t._v("git push origin feature-branch:feature-branch //推送本地的feature-branch(冒号前面的)分支到远程origin的feature-branch(冒号后面的)分支(没有会自动创建)")])])])]),t._v(" "),a("h2",{attrs:{id:"_2-tag使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-tag使用"}},[t._v("#")]),t._v(" 2.tag使用")]),t._v(" "),a("ul",[a("li",[t._v("查看tag: "),a("code",[t._v("git tag")])]),t._v(" "),a("li",[t._v("创建tag: "),a("code",[t._v("git tag 0.1")]),t._v("("),a("code",[t._v("git tag -a 0.1 -m 'add v0.1'")]),t._v(")")]),t._v(" "),a("li",[t._v("查看tag变更内容: "),a("code",[t._v("git show 0.1")])]),t._v(" "),a("li",[t._v("删除tag: "),a("code",[t._v("git tag -d 0.1")])]),t._v(" "),a("li",[t._v("推送到远程："),a("code",[t._v("git push origin 0.1")]),t._v(" 或 "),a("code",[t._v("git push --tags")])]),t._v(" "),a("li",[t._v("删除远程tag: "),a("code",[t._v("git push origin :refs/tags/0.1")])]),t._v(" "),a("li",[t._v("后期打标签："),a("code",[t._v("git tag -a v1.2 9fceb02")])])]),t._v(" "),a("h2",{attrs:{id:"_3-分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-分支"}},[t._v("#")]),t._v(" 3. 分支")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 创建分支：git branch dev "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b myfeature develop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 基于develop创建分支\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 查看分支：git branch\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 切换分支：git checkout dev\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 合并某分支到当前分支：git merge dev\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 删除本地分支：git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d dev\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 删除远程分支：git push origin dev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 查看分支合并情况：$ git log "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("graph "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("abbrev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("commit\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 创建"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("切换分支：git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 查看远程库： git remote "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 推送分支：git push origin dev\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 克隆远程分支："),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("git clone https://github.com/benson-lin/benson-lin.github.io.git")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("。默认之后克隆master分支，如果需要在dev开发，需要创建远程origin的dev分支到本地（git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b dev origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("dev），然后就可以提交了（git push origin dev）\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" 本地代码与远程同步：git "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pull，是pull本地分支对应的远程分支代码，而不是master；")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("当因冲突而push失败时，应该先pull到本地，并解决冲突后在push； pull过程中提示“no tracking information”，则说明本地分支是自己新建的，此时直接执行git pull肯定是无效的，因为和远程分支没有创建链接关系，要用命令git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("upstream branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("name origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("name或git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("upstream"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("在实际开发中，我们应该按照几个基本原则进行分支管理：")]),t._v(" "),a("p",[t._v("首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；")]),t._v(" "),a("p",[t._v("那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；")]),t._v(" "),a("p",[t._v("你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了")]),t._v(" "),a("p",[t._v("并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？")]),t._v(" "),a("ul",[a("li",[t._v("master分支是主分支，因此要时刻与远程同步；")]),t._v(" "),a("li",[t._v("dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；")]),t._v(" "),a("li",[t._v("bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；")]),t._v(" "),a("li",[t._v("feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。")])]),t._v(" "),a("h2",{attrs:{id:"git-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-config"}},[t._v("#")]),t._v(" git config")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git config --global user.name "John Doe"\n$ git config --global user.email johndoe@example.com\ngit config -l\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),a("p",[a("strong",[t._v("适用场景：")]),t._v(" 如果想恢复到之前某个提交的版本，且那个版本之后提交的版本我们都不要了，就可以用这种方法。")]),t._v(" "),a("p",[t._v("有三个不同参数(默认是--mixed）")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git reset --mixed HEAD^")]),t._v("：回退一个版本，而且会将暂存区的内容和本地已经提交的内容全部恢复到未暂存的状态。"),a("strong",[t._v("不影响原来的本地文件，未提交的也不会受到影响")]),t._v("。这个就是它的好处，你可以不用先提交，再回滚。"),a("strong",[t._v("但是个人强烈建议你还是提交之后再去回滚。（commit误提交了，把所有的add后和commit后恢复到add之前，git status 为红色：Changes not staged for commit:）")])]),t._v(" "),a("li",[a("code",[t._v("git reset --soft HEAD^")]),t._v("：回退一个版本,不清空暂存区,将已提交的内容恢复到暂存区,不影响原来本地的文件(未提交的也不受影响)"),a("strong",[t._v("（commit 错了，需要恢复到add之后，commit之前的的状态(git status为绿色：Changes to be committed:)，一般使用至少要为HEAD^，应该已经commit上去了）")])]),t._v(" "),a("li",[a("code",[t._v("git reset --hard HEAD^")]),t._v("：.回退一个版本，清空暂存区，将已提交的内容的版本恢复到本地，"),a("strong",[t._v("本地的文件也将被恢复的版本替换")]),t._v("，这里就是为什么建议你在回滚之前务必先提交自己的代码，这是非常有必要的（因为你如果使用--hard的话，同时你又没有提交的话，真的回不去了，别问我为什么知道）"),a("strong",[t._v("(使用的时候至少为HEAD，把本地的所有本地变更删除，commit不变，一般用于把本地的无add的代码直接恢复到HEAD，不用一个个删)")])])]),t._v(" "),a("p",[t._v("HEAD^:上个版本\nHEAD^^：上上给版本\n版本号：某个版本,可以通过"),a("code",[t._v("git reflog")]),t._v("查看")]),t._v(" "),a("p",[t._v("使用reset hard后，此时如果用"),a("code",[t._v("git push")]),t._v("会报错，因为我们本地库HEAD指向的版本比远程库的要旧，所以我们要用"),a("code",[t._v("git push -f")]),t._v("强制推上去。")]),t._v(" "),a("p",[t._v("reset后git log的回退版本之后的历史记录查找不到了，需要用reflog找回")]),t._v(" "),a("h2",{attrs:{id:"gitignore-已提交的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore-已提交的问题"}},[t._v("#")]),t._v(" .gitignore 已提交的问题")]),t._v(" "),a("p",[t._v("git rm --cache -r dir")]),t._v(" "),a("h2",{attrs:{id:"git-revert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),a("p",[t._v("git revert是用于“反做”某一个版本，以达到撤销该版本的修改的目的。比如，我们commit了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。")]),t._v(" "),a("p",[a("strong",[t._v("适用场景：")]),t._v(" 如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。")]),t._v(" "),a("p",[a("code",[t._v("git revert -n 版本号")])]),t._v(" "),a("p",[t._v("这里可能会出现冲突，那么需要手动修改冲突的文件。而且要git add 文件名。")]),t._v(" "),a("p",[t._v("revert会生成新版本号，旧的log日志仍然保存")]),t._v(" "),a("h2",{attrs:{id:"git删除本地找回"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git删除本地找回"}},[t._v("#")]),t._v(" git删除本地找回")]),t._v(" "),a("p",[t._v("本地分支被误删：")]),t._v(" "),a("ol",[a("li",[t._v("git  log  -g 找回之前提交的commit,并记下commit_id")]),t._v(" "),a("li",[t._v("git  branch  newbranch  commit_id")]),t._v(" "),a("li",[t._v("切换到newbranch分支，检查文件是否存在。")])]),t._v(" "),a("h2",{attrs:{id:"git-查看某个commit-到header分支后的所有记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-查看某个commit-到header分支后的所有记录"}},[t._v("#")]),t._v(" git 查看某个commit 到header分支后的所有记录")]),t._v(" "),a("p",[t._v("git log 5b6e05eaf1bde0509f6777e231f636357236adbd..HEAD --ancestry-path --merges --oneline --color | tail -n 10")]),t._v(" "),a("h2",{attrs:{id:"修改关联的远程地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改关联的远程地址"}},[t._v("#")]),t._v(" 修改关联的远程地址")]),t._v(" "),a("p",[t._v("git remote set-url origin new.git.url/here")]),t._v(" "),a("h2",{attrs:{id:"修改commit的消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改commit的消息"}},[t._v("#")]),t._v(" 修改commit的消息")]),t._v(" "),a("p",[t._v("commit后未push")]),t._v(" "),a("p",[t._v("git commit --amend")]),t._v(" "),a("p",[t._v("如果还要改作者，可能一开始是提交的时候作者填错了")]),t._v(" "),a("p",[t._v("git commit --amend --author='zebin.lin zebin.lin@shopee.com'")]),t._v(" "),a("h2",{attrs:{id:"git-cz"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-cz"}},[t._v("#")]),t._v(" git cz")]),t._v(" "),a("p",[a("code",[t._v("npm install -g commitizen")])]),t._v(" "),a("p",[a("code",[t._v("commitizen init cz-conventional-changelog --save --save-exact")])]),t._v(" "),a("p",[t._v("https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html")]),t._v(" "),a("h2",{attrs:{id:"git-加速"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-加速"}},[t._v("#")]),t._v(" git 加速")])])}),[],!1,null,null,null);a.default=r.exports}}]);