(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{567:function(v,_,e){"use strict";e.r(_);var t=e(2),a=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"vue基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue基础"}},[v._v("#")]),v._v(" Vue基础")]),v._v(" "),_("h2",{attrs:{id:"_1-vue的基本原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue的基本原理"}},[v._v("#")]),v._v(" 1. Vue的基本原理")]),v._v(" "),_("p",[v._v("当一个Vue实例创建时，Vue会遍历data中的属性，用 "),_("strong",[v._v("Object.defineProperty")]),v._v("（vue3.0使用proxy ）将它们转为 getter/setter，并且在内部追踪相关依赖，在属性被访问和修改时通知变化。 每个组件实例都有相应的 "),_("strong",[v._v("watcher 程序实例")]),v._v("，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的setter被调用时，会通知watcher重新计算，从而致使它关联的组件得以更新。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2369052cf3e244d5ac21c9505da97259~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-10-07_10-07-50.png"}})]),v._v(" "),_("h3",{attrs:{id:"_1-2-vue的优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-vue的优点"}},[v._v("#")]),v._v(" 1.2 Vue的优点")]),v._v(" "),_("ul",[_("li",[v._v("轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十 "),_("code",[v._v("kb")]),v._v(" ；")]),v._v(" "),_("li",[v._v("简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习；")]),v._v(" "),_("li",[v._v("双向数据绑定：保留了 "),_("code",[v._v("angular")]),v._v(" 的特点，在数据操作方面更为简单；")]),v._v(" "),_("li",[v._v("组件化：保留了 "),_("code",[v._v("react")]),v._v(" 的优点，实现了 "),_("code",[v._v("html")]),v._v(" 的封装和重用，在构建单页面应用方面有着独特的优势；")]),v._v(" "),_("li",[v._v("视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作；")]),v._v(" "),_("li",[v._v("虚拟DOM："),_("code",[v._v("dom")]),v._v(" 操作是非常耗费性能的，不再使用原生的 "),_("code",[v._v("dom")]),v._v(" 操作节点，极大解放 "),_("code",[v._v("dom")]),v._v(" 操作，但具体操作的还是 "),_("code",[v._v("dom")]),v._v(" 不过是换了另一种方式；")]),v._v(" "),_("li",[v._v("运行速度更快：相比较于 "),_("code",[v._v("react")]),v._v(" 而言，同样是操作虚拟 "),_("code",[v._v("dom")]),v._v("，就性能而言， "),_("code",[v._v("vue")]),v._v(" 存在很大的优势。")])]),v._v(" "),_("h2",{attrs:{id:"_2-vue响应式的原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue响应式的原理"}},[v._v("#")]),v._v(" 2. Vue响应式的原理")]),v._v(" "),_("h3",{attrs:{id:"_2-1-什么是数据劫持"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是数据劫持"}},[v._v("#")]),v._v(" "),_("strong",[v._v("2.1 什么是数据劫持")])]),v._v(" "),_("p",[v._v("数据劫持比较好理解，通常我们利用"),_("code",[v._v("Object.defineProperty")]),v._v("劫持对象的访问器，在属性值发生变化时我们可以获取变化，从而进行进一步操作。")]),v._v(" "),_("h3",{attrs:{id:"_2-2-发布者模式-订阅者模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-发布者模式-订阅者模式"}},[v._v("#")]),v._v(" "),_("strong",[v._v("2.2 发布者模式 / 订阅者模式")])]),v._v(" "),_("p",[v._v("在软件架构中，"),_("strong",[v._v("发布订阅")]),v._v("是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。")]),v._v(" "),_("p",[v._v("这里很明显了，区别就在于，不同于观察者和被观察者，"),_("strong",[v._v("发布者和订阅者是互相不知道对方的存在的，发布者只需要把消息发送到订阅器里面，订阅者只管接受自己需要订阅的内容")])]),v._v(" "),_("h3",{attrs:{id:"_2-3-响应式原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-响应式原理"}},[v._v("#")]),v._v(" "),_("strong",[v._v("2.3 响应式原理")])]),v._v(" "),_("p",[v._v("Vue响应式的原理就是采用"),_("strong",[v._v("数据劫持")]),v._v("结合"),_("strong",[v._v("发布者-订阅者模式")]),v._v("的方式，通过"),_("strong",[v._v("Object.defineProperty()")]),v._v(" 来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。主要分为以下几个步骤：")]),v._v(" "),_("p",[_("strong",[v._v("Observe")]),v._v("(被劫持的数据对象) "),_("strong",[v._v("Compile")]),v._v("(vue的编译器) "),_("strong",[v._v("Wather")]),v._v("(订阅者) "),_("strong",[v._v("Dep")]),v._v("(用于收集Watcher订阅者们)")]),v._v(" "),_("p",[v._v("1.需要给"),_("strong",[v._v("Observe")]),v._v("的数据对象进行递归遍历，包括子属性对象的属性，都加上"),_("strong",[v._v("setter")]),v._v("和"),_("strong",[v._v("getter")]),v._v("这样的属性，给这个对象的某个值赋值，就会触发"),_("strong",[v._v("setter")]),v._v("，那么就能监听到了数据变化。")]),v._v(" "),_("p",[v._v("2."),_("strong",[v._v("Compile")]),v._v("解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图")]),v._v(" "),_("p",[v._v("3."),_("strong",[v._v("Watcher")]),v._v("订阅者是"),_("strong",[v._v("Observer")]),v._v("和"),_("strong",[v._v("Compile")]),v._v("之间通信的桥梁，主要做的事情是: ①在自身实例化时往属性订阅器("),_("strong",[v._v("Dep")]),v._v(")里面添加自己 ②自身必须有一个"),_("strong",[v._v("update")]),v._v("()方法 ③待属性变动"),_("strong",[v._v("dep.notice()")]),v._v(" 通知时，能调用自身的"),_("strong",[v._v("update()")]),v._v(" 方法，并触发"),_("strong",[v._v("Compile")]),v._v("中绑定的回调，则功成身退。")]),v._v(" "),_("p",[v._v("4.MVVM作为数据绑定的入口，整合"),_("strong",[v._v("Observer")]),v._v("、"),_("strong",[v._v("Compile")]),v._v("和"),_("strong",[v._v("Watcher")]),v._v("三者，通过"),_("strong",[v._v("Observer")]),v._v("来监听自己的"),_("strong",[v._v("model")]),v._v("数据变化，通过"),_("strong",[v._v("Compile")]),v._v("来解析编译模板指令，最终利用"),_("strong",[v._v("Watcher")]),v._v("搭起"),_("strong",[v._v("Observer")]),v._v("和"),_("strong",[v._v("Compile")]),v._v("之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8b6808985354109a11d2ce29c6903de~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-10-07_10-09-27.png"}})]),v._v(" "),_("h2",{attrs:{id:"_3-object-defineproperty的使用方式-有什么缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-object-defineproperty的使用方式-有什么缺点"}},[v._v("#")]),v._v(" 3. Object.defineProperty的使用方式，有什么缺点")]),v._v(" "),_("p",[_("strong",[v._v("使用方法")])]),v._v(" "),_("p",[_("strong",[v._v("Object.defineProperty( obj, prop, descriptor )")])]),v._v(" "),_("p",[v._v("三个参数:")]),v._v(" "),_("p",[_("strong",[v._v("obj")]),v._v(" 要定义的对象")]),v._v(" "),_("p",[_("strong",[v._v("prop")]),v._v(" 要定义或修改的属性名称或 Symbol")]),v._v(" "),_("p",[_("strong",[v._v("descriptor")]),v._v(" 要定义或修改的属性描述符(配置对象)")]),v._v(" "),_("p",[v._v("属性描述符(配置对象)")]),v._v(" "),_("p",[_("strong",[v._v("get")]),v._v(" 属性的 getter 函数，如果没有 getter，则为 "),_("code",[v._v("undefined")]),v._v("。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 "),_("code",[v._v("this")]),v._v(" 对象（由于继承关系，这里的"),_("code",[v._v("this")]),v._v("并不一定是定义该属性的对象）。该函数的返回值会被用作属性的值。 "),_("strong",[v._v("默认为 ["),_("code",[v._v("undefined")]),v._v("]")]),v._v(" "),_("strong",[v._v("set")]),v._v(" 属性的 setter 函数，如果没有 setter，则为 "),_("code",[v._v("undefined")]),v._v("。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 "),_("code",[v._v("this")]),v._v(" 对象。 "),_("strong",[v._v("默认为 ["),_("code",[v._v("undefined")]),v._v("]")])]),v._v(" "),_("p",[_("strong",[v._v("缺点：")])]),v._v(" "),_("p",[v._v("在对一些属性进行操作时，使用这种方法无法拦截，比如"),_("strong",[v._v("通过下标方式修改数组")]),v._v("数据或者"),_("strong",[v._v("给对象新增属性")]),v._v("，这都不能触发组件的重新渲染，因为 Object.defineProperty 不能拦截到这些操作。更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。")]),v._v(" "),_("p",[v._v("在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用Proxy 的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为 Proxy 是 ES6 的语法。")]),v._v(" "),_("h3",{attrs:{id:"_3-2-object-defineproperty-target-key-options-options可传什么参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-object-defineproperty-target-key-options-options可传什么参数"}},[v._v("#")]),v._v(" 3.2 Object.defineProperty(target, key, options)，options可传什么参数？")]),v._v(" "),_("ul",[_("li",[v._v("value：给target[key]设置初始值")]),v._v(" "),_("li",[v._v("get：调用target[key]时触发")]),v._v(" "),_("li",[v._v("set：设置target[key]时触发")]),v._v(" "),_("li",[v._v("writable：规定target[key]是否可被重写，默认false")]),v._v(" "),_("li",[v._v("enumerable：规定了key是否会出现在target的枚举属性中，默认为false")]),v._v(" "),_("li",[v._v("configurable：规定了能否改变options，以及删除key属性，默认false，具体详细请看")])]),v._v(" "),_("h2",{attrs:{id:"_4-mvvm、mvc、mvp的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-mvvm、mvc、mvp的区别"}},[v._v("#")]),v._v(" 4. MVVM、MVC、MVP的区别")]),v._v(" "),_("h3",{attrs:{id:"_1-mvc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-mvc"}},[v._v("#")]),v._v(" "),_("strong",[v._v("（1）MVC")])]),v._v(" "),_("p",[_("strong",[v._v("M: model数据模型, V:view视图模型, C: controller控制器")])]),v._v(" "),_("p",[v._v("MVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了"),_("strong",[v._v("观察者模式")]),v._v("，当 Model 层发生改变的时候它会"),_("strong",[v._v("通知")]),v._v("有关 View 层更新页面。Controller 层是 View 层和 Model 层的"),_("strong",[v._v("纽带")]),v._v("，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Controller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知View视图更新。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22f6dd1b8a8a4ec293ed91325ebbaa1b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-10-07_10-15-46.png"}})]),v._v(" "),_("h3",{attrs:{id:"_2-mvp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-mvp"}},[v._v("#")]),v._v(" "),_("strong",[v._v("（2）MVP")])]),v._v(" "),_("p",[_("strong",[v._v("M: model数据模型, V:view视图模型, P: Presenter 控制器")])]),v._v(" "),_("p",[v._v("MVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。")]),v._v(" "),_("p",[v._v("MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的"),_("strong",[v._v("解耦")]),v._v("。MVC 中的Controller 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此可以在 Presenter 中将 Model 的变化和 View 的变化"),_("strong",[v._v("绑定")]),v._v("在一起，以此来实现 View 和 Model 的"),_("strong",[v._v("同步更新")]),v._v("。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。")]),v._v(" "),_("h3",{attrs:{id:"_3-mvvm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-mvvm"}},[v._v("#")]),v._v(" "),_("strong",[v._v("（3）MVVM")])]),v._v(" "),_("p",[v._v("MVVM 分为 Model、View、ViewModel：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("Model代表数据模型，数据和业务逻辑都在Model层中定义；")])]),v._v(" "),_("li",[_("strong",[v._v("View代表UI视图，负责数据的展示；")])]),v._v(" "),_("li",[_("strong",[v._v("ViewModel负责监听Model中数据的改变并且控制视图的更新，处理用户交互操作；")])])]),v._v(" "),_("p",[v._v("Model和View并无直接关联，而是通过ViewModel来进行联系的，Model和ViewModel之间有着"),_("strong",[v._v("双向数据绑定")]),v._v("的联系。因此当Model中的数据改变时会触发View层的刷新，View中由于用户交互操作而改变的数据也会在Model中同步。")]),v._v(" "),_("p",[v._v("这种模式实现了 Model和View的"),_("strong",[v._v("数据自动同步")]),v._v("，因此开发者只需要专注于数据的维护操作即可，而不需要自己操作DOM。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deffd15d0d9647f599de5af394309ff8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-10-07_10-12-52.png"}})]),v._v(" "),_("h3",{attrs:{id:"_4-2-mvvm的优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-mvvm的优缺点"}},[v._v("#")]),v._v(" 4.2 "),_("strong",[v._v("MVVM")]),v._v("的优缺点?")]),v._v(" "),_("p",[v._v("优点:")]),v._v(" "),_("ul",[_("li",[v._v('分离视图（View）和模型（Model），降低代码耦合，提⾼视图或者逻辑的重⽤性: ⽐如视图（View）可以独⽴于Model变化和修改，⼀个ViewModel可以绑定不同的"View"上，当View变化的时候Model不可以不变，当Model变化的时候View也可以不变。你可以把⼀些视图逻辑放在⼀个ViewModel⾥⾯，让很多view重⽤这段视图逻辑')]),v._v(" "),_("li",[v._v("提⾼可测试性: ViewModel的存在可以帮助开发者更好地编写测试代码")]),v._v(" "),_("li",[v._v("⾃动更新dom: 利⽤双向绑定,数据更新后视图⾃动更新,让开发者从繁琐的⼿动dom中解放")])]),v._v(" "),_("p",[v._v("缺点:")]),v._v(" "),_("ul",[_("li",[v._v("Bug很难被调试: 因为使⽤双向绑定的模式，当你看到界⾯异常了，有可能是你View的代码有Bug，也可能是Model的代码有问题。数据绑定使得⼀个位置的Bug被快速传递到别的位置，要定位原始出问题的地⽅就变得不那么容易了。另外，数据绑定的声明是指令式地写在View的模版当中的，这些内容是没办法去打断点debug的")]),v._v(" "),_("li",[v._v("⼀个⼤的模块中model也会很⼤，虽然使⽤⽅便了也很容易保证了数据的⼀致性，当时⻓期持有，不释放内存就造成了花费更多的内存")]),v._v(" "),_("li",[v._v("对于⼤型的图形应⽤程序，视图状态较多，ViewModel的构建和维护的成本都会⽐较⾼")])]),v._v(" "),_("h2",{attrs:{id:"_5-vue的常用指令及作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue的常用指令及作用"}},[v._v("#")]),v._v(" 5. Vue的常用指令及作用")]),v._v(" "),_("ul",[_("li",[v._v("v-on 给标签绑定函数，可以缩写为@，例如绑定一个点击函数 函数必须写在methods里面")]),v._v(" "),_("li",[v._v("v-bind 动态绑定 作用： 及时对页面的数据进行更改, 可以简写成：冒号")]),v._v(" "),_("li",[v._v("v-slot: 缩写为#, 组件插槽")]),v._v(" "),_("li",[v._v("v-for 根据数组的个数, 循环数组元素的同时还生成所在的标签")]),v._v(" "),_("li",[v._v("v-show 显示内容")]),v._v(" "),_("li",[v._v("v-if 显示与隐藏")]),v._v(" "),_("li",[v._v("v-else 必须和v-if连用 不能单独使用 否则报错")]),v._v(" "),_("li",[v._v("v-text 解析文本")]),v._v(" "),_("li",[v._v("v-html 解析html标签")])]),v._v(" "),_("h3",{attrs:{id:"_5-2-vue怎么动态绑定class-与-style"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-vue怎么动态绑定class-与-style"}},[v._v("#")]),v._v(" 5.2 Vue怎么动态绑定Class 与 Style")]),v._v(" "),_("p",[v._v("// v-bind:class=\"{ '类名': bool, '类名': bool ......}\"\n// 如果值为true 该类样式就会被应用在元素身上, false则不会\n// 注意点：如果类名有 - ，则需要使用引号包起来\n// ```")]),v._v(" "),_("p",[v._v("// "),_("code",[v._v("v-bind:style")]),v._v(" 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS property 名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名")]),v._v(" "),_("p",[v._v("// 直接绑定到一个样式对象通常更好，这会让模板更清晰：")]),v._v(" "),_("p",[v._v("// "),_("code",[v._v("css // <div v-bind:style=\"styleObject\"></div> // data: { // styleObject: { //   color: 'red', //   fontSize: '13px' // } // } //")])]),v._v(" "),_("h2",{attrs:{id:"_6-vue常用的修饰符"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue常用的修饰符"}},[v._v("#")]),v._v(" 6. vue常用的修饰符")]),v._v(" "),_("p",[_("strong",[v._v("v-on")])]),v._v(" "),_("ul",[_("li",[_("code",[v._v(".stop")]),v._v(" - 调用 "),_("code",[v._v("event.stopPropagation()")]),v._v("。 阻止默认事件")]),v._v(" "),_("li",[_("code",[v._v(".prevent")]),v._v(" - 调用 "),_("code",[v._v("event.preventDefault()")]),v._v("。阻止默认行为")]),v._v(" "),_("li",[_("code",[v._v(".native")]),v._v(" - 监听组件根元素的原生事件。")])]),v._v(" "),_("p",[_("strong",[v._v("v-bind")])]),v._v(" "),_("ul",[_("li",[_("code",[v._v(".prop")]),v._v(" - 作为一个 DOM property 绑定而不是作为 attribute 绑定。")]),v._v(" "),_("li",[_("code",[v._v(".camel")]),v._v(" - (2.1.0+) 将 kebab-case attribute 名转换为 camelCase。(从 2.1.0 开始支持)")]),v._v(" "),_("li",[_("code",[v._v(".sync")]),v._v(" (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 "),_("code",[v._v("v-on")]),v._v(" 侦听器。")])]),v._v(" "),_("p",[_("strong",[v._v("v-model")])]),v._v(" "),_("ul",[_("li",[v._v("["),_("code",[v._v(".lazy")]),v._v("]- 取代 "),_("code",[v._v("input")]),v._v(" 监听 "),_("code",[v._v("change")]),v._v(" 事件")]),v._v(" "),_("li",[v._v("["),_("code",[v._v(".number")]),v._v("] - 输入字符串转为有效的数字")]),v._v(" "),_("li",[v._v("["),_("code",[v._v(".trim")]),v._v("] - 输入首尾空格过滤")])]),v._v(" "),_("h2",{attrs:{id:"_7-vue的内置组件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-vue的内置组件"}},[v._v("#")]),v._v(" 7. Vue的内置组件")]),v._v(" "),_("h3",{attrs:{id:"component"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#component"}},[v._v("#")]),v._v(" "),_("strong",[v._v("component")])]),v._v(" "),_("p",[v._v("渲染一个“元组件”为动态组件。依 is 的值，来决定哪个组件被渲染")]),v._v(" "),_("p",[v._v("在一个多标签的界面中使用 is attribute 来切换不同的组件：tap栏切换")]),v._v(" "),_("h3",{attrs:{id:"transition"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#transition"}},[v._v("#")]),v._v(" "),_("strong",[v._v("transition")])]),v._v(" "),_("p",[v._v("用于在 Vue 插入、更新或者移除 DOM 时， 提供多种不同方式的应用过渡、动画效果。")]),v._v(" "),_("h3",{attrs:{id:"transition-group"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#transition-group"}},[v._v("#")]),v._v(" "),_("strong",[v._v("transition-group")])]),v._v(" "),_("p",[_("code",[v._v("<transition-group>")]),v._v(" 用于给列表统一设置过渡动画。")]),v._v(" "),_("h3",{attrs:{id:"keep-alive"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[v._v("#")]),v._v(" "),_("strong",[v._v("keep-alive")])]),v._v(" "),_("ul",[_("li",[v._v("主要用于保留组件状态或避免组件重新渲染。")]),v._v(" "),_("li",[_("strong",[v._v("include")]),v._v(" 属性用于指定哪些组件会被缓存，具有多种设置方式。")]),v._v(" "),_("li",[_("strong",[v._v("exclude")]),v._v(" 属性用于指定哪些组件不会被缓存。")]),v._v(" "),_("li",[_("strong",[v._v("max")]),v._v(" 属性用于设置最大缓存个数。")])]),v._v(" "),_("h3",{attrs:{id:"slot"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#slot"}},[v._v("#")]),v._v(" "),_("strong",[v._v("slot")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("name")]),v._v(" - string，用于命名插槽。")]),v._v(" "),_("li",[v._v("< slot> 元素作为组件模板之中的内容分发插槽。< slot> 元素自身将被替换。")])]),v._v(" "),_("h2",{attrs:{id:"_8-v-if、v-show、v-html-的原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-v-if、v-show、v-html-的原理"}},[v._v("#")]),v._v(" 8. v-if、v-show、v-html 的原理")]),v._v(" "),_("p",[_("code",[v._v("v-if")]),v._v("会调用addIfCondition方法，生成vnode的时候会忽略对应节点，render的时候就不会渲染；")]),v._v(" "),_("p",[_("code",[v._v("v-show")]),v._v("会生成vnode，render的时候也会渲染成真实节点，只是在render过程中会在节点的属性中修改show属性值，也就是常说的display；")]),v._v(" "),_("p",[_("code",[v._v("v-html")]),v._v("会先移除节点下的所有节点，调用html方法，通过addProp添加innerHTML属性，归根结底还是设置innerHTML为v-html的值。")]),v._v(" "),_("h2",{attrs:{id:"_9-v-show和v-if的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-v-show和v-if的区别"}},[v._v("#")]),v._v(" 9. v-show和v-if的区别")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("v-show和v-if的区别? 分别说明其使用场景?")])]),v._v(" "),_("li",[_("p",[v._v("相同点： v-show 和v-if都是true的时候显示，false的时候隐藏")])]),v._v(" "),_("li",[_("p",[v._v("不同点1：原理不同")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("v-show")]),v._v(":一定会渲染，只是修改display属性")]),v._v(" "),_("li",[_("code",[v._v("v-if")]),v._v(":根据条件渲染")])])]),v._v(" "),_("li",[_("p",[v._v("不同点2：应用场景不同")]),v._v(" "),_("ul",[_("li",[v._v("频繁切换用v-show,不频繁切换用v-if")])])])]),v._v(" "),_("p",[_("code",[v._v("v-if")]),v._v(" 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建，操作的实际上是dom元素的创建或销毁。")]),v._v(" "),_("p",[_("code",[v._v("v-show")]),v._v(" 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换 它操作的是display:none/block属性。")]),v._v(" "),_("p",[v._v("一般来说，"),_("code",[v._v("v-if")]),v._v(" 有更高的切换开销，而 "),_("code",[v._v("v-show")]),v._v(" 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 "),_("code",[v._v("v-show")]),v._v(" 较好；如果在运行时条件很少改变，则使用 "),_("code",[v._v("v-if")]),v._v(" 较好。")]),v._v(" "),_("h2",{attrs:{id:"_10-为什么避免v-for和v-if在一起使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-为什么避免v-for和v-if在一起使用"}},[v._v("#")]),v._v(" 10. 为什么避免v-for和v-if在一起使用?")]),v._v(" "),_("p",[v._v("Vue 处理指令时，v-for 比 v-if 具有更高的"),_("code",[v._v("优先级")]),v._v(", 虽然用起来也没报错好使, 但是性能不高, 如果你有5个元素被v-for循环, v-if也会分别执行5次.")]),v._v(" "),_("h2",{attrs:{id:"_11-v-for-循环为什么一定要绑定key"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-v-for-循环为什么一定要绑定key"}},[v._v("#")]),v._v(" 11. v-for 循环为什么一定要绑定key ?")]),v._v(" "),_("blockquote",[_("p",[v._v("提升vue渲染性能")])]),v._v(" "),_("ul",[_("li",[v._v("1.vue在渲染的时候,会 先把 新DOM 与 旧DOM 进行对比， 如果dom结构一致，则vue会复用旧的dom。 （此时可能造成数据渲染异常）")]),v._v(" "),_("li",[v._v("2.使用key可以给dom添加一个标识符，让vue强制更新dom")])]),v._v(" "),_("p",[v._v("比如有一个列表 li1 到 li4，我们需要在中间插入一个li3，"),_("code",[v._v("li1")]),v._v(" 和 "),_("code",[v._v("li2")]),v._v(" 不会重新渲染，而 "),_("code",[v._v("li3、li4、li5")]),v._v(" 都会重新渲染")]),v._v(" "),_("p",[v._v("因为在不使用 "),_("code",[v._v("key")]),v._v(" 或者列表的 "),_("code",[v._v("index")]),v._v(" 作为 "),_("code",[v._v("key")]),v._v(" 的时候，每个元素对应的位置关系都是 index，直接导致我们插入的元素到后面的全部元素，对应的位置关系都发生了变更，所以全部都会执行更新操作, 这是不可取的")]),v._v(" "),_("p",[v._v("而在使用唯一 "),_("code",[v._v("key")]),v._v(" 的情况下，每个元素对应的位置关系就是 "),_("code",[v._v("key")]),v._v("，来看一下使用唯一 "),_("code",[v._v("key")]),v._v(" 值的情况下")]),v._v(" "),_("p",[v._v("这样如图中的 "),_("code",[v._v("li3")]),v._v(" 和 "),_("code",[v._v("li4")]),v._v(" 就不会重新渲染，因为元素内容没发生改变，对应的位置关系也没有发生改变。")]),v._v(" "),_("p",[v._v("这也是为什么 v-for 必须要写 key，而且不建议开发中使用数组的 index 作为 key 的原因")]),v._v(" "),_("p",[v._v("总结一下：")]),v._v(" "),_("ul",[_("li",[v._v("key 的作用主要是为了更高效的更新虚拟 DOM，因为它可以非常精确的找到相同节点，因此 patch 过程会非常高效")]),v._v(" "),_("li",[v._v("Vue 在 patch 过程中会判断两个节点是不是相同节点时，key 是一个必要条件。比如渲染列表时，如果不写 key，Vue 在比较的时候，就可能会导致频繁更新元素，使整个 patch 过程比较低效，影响性能")]),v._v(" "),_("li",[v._v("应该避免使用数组下标作为 key，因为 key 值不是唯一的话可能会导致上面图中表示的 bug，使 Vue 无法区分它他，还有比如在使用相同标签元素过渡切换的时候，就会导致只替换其内部属性而不会触发过渡效果")]),v._v(" "),_("li",[v._v("从源码里可以知道，Vue 判断两个节点是否相同时主要判断两者的元素类型和 key 等，如果不设置 key，就可能永远认为这两个是相同节点，只能去做更新操作，就造成大量不必要的 DOM 更新操作，明显是不可取的")])]),v._v(" "),_("h3",{attrs:{id:"_11-2-为什么不建议用index索引作为key"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-为什么不建议用index索引作为key"}},[v._v("#")]),v._v(" 11.2 为什么不建议用index索引作为key?")]),v._v(" "),_("p",[v._v("使用index 作为 key和没写基本上没区别，因为不管数组的顺序怎么颠倒，index 都是 0, 1, 2...这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作。")]),v._v(" "),_("h2",{attrs:{id:"_12-v-model-是如何实现的-语法糖实际是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_12-v-model-是如何实现的-语法糖实际是什么"}},[v._v("#")]),v._v(" 12. v-model 是如何实现的，语法糖实际是什么？")]),v._v(" "),_("p",[_("strong",[v._v("（1）作用在表单元素上")]),v._v(" 动态绑定了 input 的 value 指向了 messgae 变量，并且在触发 input 事件的时候去动态把 message设置为目标值：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f554ba199884e8d8eb96d04d97c9db1~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-08-11_20-28-07.jpg"}})]),v._v(" "),_("p",[_("strong",[v._v("（2）作用在组件上")]),v._v(" 在自定义组件中，v-model 默认会利用名为 value 的 prop和名为 input 的事件")]),v._v(" "),_("p",[_("strong",[v._v("本质是一个父子组件通信的语法糖，通过prop和$.emit实现。")]),v._v(" 因此父组件 v-model 语法糖本质上可以修改为：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8de06e44a2046afaa182a42e1a3b033~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-08-11_20-28-55.jpg"}})]),v._v(" "),_("p",[v._v("在组件的实现中，可以通过 v-model属性来配置子组件接收的prop名称，以及派发的事件名称。 例子：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7215208de2124bfbbfb2f617e473507f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-08-11_20-29-31.jpg"}})]),v._v(" "),_("p",[v._v("默认情况下，一个组件上的v-model 会把 value 用作 "),_("code",[v._v("prop")]),v._v("且把 input 用作 "),_("code",[v._v("event")]),v._v("。但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。js 监听input 输入框输入数据改变，用oninput，数据改变以后就会立刻出发这个事件。通过input事件把数据"),_("code",[v._v("$emit")]),v._v(" 出去，在父组件接受。父组件设置v-model的值为input "),_("code",[v._v("$emit")]),v._v("过来的值。")]),v._v(" "),_("h2",{attrs:{id:"_13-v-model-可以被用在自定义组件上吗-如果可以-如何使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_13-v-model-可以被用在自定义组件上吗-如果可以-如何使用"}},[v._v("#")]),v._v(" 13. v-model 可以被用在自定义组件上吗？如果可以，如何使用？")]),v._v(" "),_("p",[_("strong",[v._v("可以")]),v._v("。v-model 实际上是一个语法糖，用在自定义组件上也是同理：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f5b193577414a5a9a3d3271fe3789a0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-10-07_10-19-44.png"}})]),v._v(" "),_("p",[v._v("相当于")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0601cc2b0964583bd41a63dd009aefe~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-10-07_10-19-52.png"}})]),v._v(" "),_("p",[v._v("显然，custom-input 与父组件的交互如下：")]),v._v(" "),_("ol",{attrs:{start:"0"}},[_("li",[v._v("父组件将"),_("code",[v._v("searchText")]),v._v("变量传入custom-input 组件，使用的 prop 名为"),_("code",[v._v("value")]),v._v("；")]),v._v(" "),_("li",[v._v("custom-input 组件向父组件传出名为"),_("code",[v._v("input")]),v._v("的事件，父组件将接收到的值赋值给"),_("code",[v._v("searchText")]),v._v("；")])]),v._v(" "),_("p",[v._v("所以，custom-input 组件的实现应该类似于这样：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89a368414d114e82b31d44dea7c6410b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-10-07_10-20-35.png"}})]),v._v(" "),_("h2",{attrs:{id:"_14-v-model和-sync的对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_14-v-model和-sync的对比"}},[v._v("#")]),v._v(" 14. v-model和.sync的对比")]),v._v(" "),_("p",[v._v("v-model与.sync的共同点：都是"),_("code",[v._v("语法糖")]),v._v("，都可以实现父子组件中的数据的双向通信。")]),v._v(" "),_("p",[v._v("v-model与.sync的不共同点：")]),v._v(" "),_("p",[_("strong",[v._v("v-model：")])]),v._v(" "),_("p",[v._v('1.父组件 v-model="" 子组件 @(input,value)')]),v._v(" "),_("p",[v._v("2.一个组件只能绑定"),_("code",[v._v("一个")]),v._v("v-model")]),v._v(" "),_("p",[v._v("3.v-model针对更多的是最终操作结果，是"),_("code",[v._v("双向绑定的结果")]),v._v("，是"),_("code",[v._v("value")]),v._v("，是一种"),_("code",[v._v("change操作")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v(".sync：")])]),v._v(" "),_("p",[v._v("1.父组件 :my-prop-name.sync 子组件@update:my-prop-name 的模式来替代事件触发，实现父子组件间的双向绑定。")]),v._v(" "),_("p",[v._v("2.一个组件可以"),_("code",[v._v("多个")]),v._v('属性用.sync修饰符，可以同时"双向绑定多个“prop”')]),v._v(" "),_("p",[v._v("3..sync针对更多的是各种各样的状态，是"),_("code",[v._v("状态的互相传递")]),v._v("，是"),_("code",[v._v("status")]),v._v("，是一种"),_("code",[v._v("update操作")]),v._v("。")]),v._v(" "),_("h2",{attrs:{id:"_15-计算属性computed-和watch-的区别是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_15-计算属性computed-和watch-的区别是什么"}},[v._v("#")]),v._v(" 15. 计算属性computed 和watch 的区别是什么？")]),v._v(" "),_("h4",{attrs:{id:"computed"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#computed"}},[v._v("#")]),v._v(" "),_("strong",[_("code",[v._v("Computed")]),v._v("：")])]),v._v(" "),_("ul",[_("li",[v._v("它"),_("strong",[v._v("支持缓存")]),v._v("，只有依赖的数据发生了变化，才会重新计算")]),v._v(" "),_("li",[_("strong",[v._v("不支持异步")]),v._v("，当Computed中有异步操作时，无法监听数据的变化")]),v._v(" "),_("li",[v._v("computed的值会"),_("strong",[v._v("默认走缓存")]),v._v("，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data声明过，或者父组件传递过来的props中的数据进行计算的。")]),v._v(" "),_("li",[_("strong",[v._v("如果一个属性是由其他属性计算而来的，这个属性依赖其他的属性，一般会使用computed")])]),v._v(" "),_("li",[v._v("如果computed属性的属性值是函数，那么"),_("strong",[v._v("默认使用get方法")]),v._v("，函数的返回值就是属性的属性值；在computed中，属性有一个get方法和一个set方法，当数据发生变化时，会调用set方法。")])]),v._v(" "),_("h4",{attrs:{id:"watch"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#watch"}},[v._v("#")]),v._v(" "),_("strong",[_("code",[v._v("Watch")]),v._v("：")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("它"),_("strong",[v._v("不支持缓存")]),v._v("，数据变化时，它就会触发相应的操作")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("支持异步")]),v._v("监听")])]),v._v(" "),_("li",[_("p",[v._v("监听的函数接收"),_("strong",[v._v("两个参数")]),v._v("，第一个参数是最新的值，第二个是变化之前的值")])]),v._v(" "),_("li",[_("p",[v._v("当一个属性发生变化时，就需要执行相应的操作")])]),v._v(" "),_("li",[_("p",[v._v("监听数据必须是data中声明的或者父组件传递过来的props中的数据，当发生变化时，会触发其他操作，函数有两个的参数：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("immediate")]),v._v("：组件加载立即触发回调函数")]),v._v(" "),_("li",[_("strong",[v._v("deep")]),v._v("：深度监听，发现数据内部的变化，在复杂数据类型中使用，例如数组中的对象发生变化。需要注意的是，deep无法监听到数组和对象内部的变化。")])])])]),v._v(" "),_("p",[v._v("当想要执行异步或者昂贵的操作以响应不断的变化时，就需要使用watch。")]),v._v(" "),_("p",[_("strong",[v._v("总结：")])]),v._v(" "),_("ul",[_("li",[_("code",[v._v("computed")]),v._v(" 计算属性 : 依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值。")]),v._v(" "),_("li",[_("code",[v._v("watch")]),v._v(" 侦听器 : 更多的是"),_("strong",[v._v("观察")]),v._v("的作用，"),_("strong",[v._v("无缓存性")]),v._v("，类似于某些数据的监听回调，每当监听的数据变化时都会执行回调进行后续操作。")])]),v._v(" "),_("p",[_("strong",[v._v("运用场景：")])]),v._v(" "),_("ul",[_("li",[v._v("当需要进行数值计算,并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时都要重新计算。")]),v._v(" "),_("li",[v._v("当需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许执行异步操作 ( 访问一个 API )，限制执行该操作的频率，并在得到最终结果前，设置中间状态。这些都是计算属性无法做到的。")])]),v._v(" "),_("h2",{attrs:{id:"_16-computed-和-methods-的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_16-computed-和-methods-的区别"}},[v._v("#")]),v._v(" 16. Computed 和 Methods 的区别")]),v._v(" "),_("p",[v._v("可以将同一函数定义为一个 method 或者一个计算属性。对于最终的结果，两种方式是相同的")]),v._v(" "),_("p",[_("strong",[v._v("不同点：")])]),v._v(" "),_("ul",[_("li",[_("code",[v._v("computed")]),v._v(": 计算属性是基于它们的依赖进行缓存的，只有在它的相关依赖发生改变时才会重新求值；")]),v._v(" "),_("li",[_("code",[v._v("method")]),v._v(" 调用总会执行该函数。")])]),v._v(" "),_("h2",{attrs:{id:"_17-什么是组件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_17-什么是组件"}},[v._v("#")]),v._v(" 17. 什么是组件")]),v._v(" "),_("p",[_("strong",[v._v("组件就是把图形、非图形的各种逻辑均抽象为一个"),_("code",[v._v("统一的概念")]),v._v("（组件）来实现开发的模式，在"),_("code",[v._v("Vue")]),v._v("中每一个"),_("code",[v._v(".vue")]),v._v("文件都可以视为一个组件")])]),v._v(" "),_("h4",{attrs:{id:"组件的优势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组件的优势"}},[v._v("#")]),v._v(" "),_("strong",[v._v("组件的优势")])]),v._v(" "),_("ol",{attrs:{start:"0"}},[_("li",[v._v("降低整个系统的耦合度，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求")]),v._v(" "),_("li",[v._v("调试方便，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单")]),v._v(" "),_("li",[v._v("提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级")])]),v._v(" "),_("h2",{attrs:{id:"_18-什么是插件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_18-什么是插件"}},[v._v("#")]),v._v(" 18. 什么是插件")]),v._v(" "),_("p",[_("strong",[v._v("插件通常用来为 "),_("code",[v._v("Vue")]),v._v(" 添加全局功能")]),v._v("。插件的功能范围没有严格的限制——一般有下面几种：")]),v._v(" "),_("ul",[_("li",[v._v("添加全局方法或者属性。如: "),_("code",[v._v("vue-custom-element")])]),v._v(" "),_("li",[v._v("添加全局资源：指令/过滤器/过渡等。如 "),_("code",[v._v("vue-touch")])]),v._v(" "),_("li",[v._v("添加全局公共组件 Vue.component()")]),v._v(" "),_("li",[v._v("添加全局公共指令 Vue.directive()")]),v._v(" "),_("li",[v._v("通过全局混入来添加一些组件选项。如"),_("code",[v._v("vue-router")])]),v._v(" "),_("li",[v._v("添加 "),_("code",[v._v("Vue")]),v._v(" 实例方法，通过把它们添加到 "),_("code",[v._v("Vue.prototype")]),v._v(" 上实现。")]),v._v(" "),_("li",[v._v("一个库，提供自己的 "),_("code",[v._v("API")]),v._v("，同时提供上面提到的一个或多个功能。如"),_("code",[v._v("vue-router")])])]),v._v(" "),_("h3",{attrs:{id:"_18-2-vue2和vue3怎么注册全局组件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_18-2-vue2和vue3怎么注册全局组件"}},[v._v("#")]),v._v(" 18.2 Vue2和Vue3怎么注册全局组件")]),v._v(" "),_("p",[v._v("Vue2使用 "),_("code",[v._v("Vue.component('组件名'，组件对象)")])]),v._v(" "),_("p",[v._v("Vue3使用")]),v._v(" "),_("div",{staticClass:"language-scss line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-scss"}},[_("code",[v._v("const app = "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("createApp")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("App"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\napp."),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("component")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token string"}},[v._v("'组件名'")]),v._v("，组件对象"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("h3",{attrs:{id:"_18-3-vue2、vue3怎么封装自定义插件并使用-vue-use-install"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_18-3-vue2、vue3怎么封装自定义插件并使用-vue-use-install"}},[v._v("#")]),v._v(" 18.3 Vue2、Vue3怎么封装自定义插件并使用/ Vue.use() （install）")]),v._v(" "),_("p",[_("strong",[v._v("Vue2")])]),v._v(" "),_("p",[v._v("在compoents.index.js里，定义一个函数或对象，在里面可以使用Vue.compoent全局注册组件，并暴露出去")]),v._v(" "),_("p",[v._v("在main.js里使用Vue.use( )，参数类型必须是 object 或 Function")]),v._v(" "),_("p",[_("strong",[v._v("Vue3")])]),v._v(" "),_("p",[v._v("在compoents.index.ts里，定义一个函数或对象，在里面可以使用app.compoent全局注册组件，并暴露出去")]),v._v(" "),_("p",[v._v("在main.ts里使用app.use( )，参数类型必须是 object 或 Function")]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("如果是 Function 那么这个函数就被当做 install 方法")]),v._v(" "),_("p",[v._v("如果是 object 则需要定义一个 install 方法")]),v._v(" "),_("h2",{attrs:{id:"_19-组件通信-组件传值的方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_19-组件通信-组件传值的方法"}},[v._v("#")]),v._v(" 19. 组件通信/ 组件传值的方法")]),v._v(" "),_("p",[_("strong",[v._v("什么是组件通信")])]),v._v(" "),_("p",[v._v("组件("),_("code",[v._v(".vue")]),v._v(")通过某种方式来传递信息以达到某个目的")]),v._v(" "),_("p",[_("strong",[v._v("组件通信解决了什么问题")])]),v._v(" "),_("p",[v._v("每个组件之间的都有独自的作用域，组件间的数据是无法共享的但实际开发工作中我们常常需要让组件之间共享数据，这也是组件通信的目的要让它们互相之间能进行通讯，这样才能构成完整系统")]),v._v(" "),_("h3",{attrs:{id:"_1-props-emit-父子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-props-emit-父子"}},[v._v("#")]),v._v(" "),_("strong",[v._v("（1）props / $emit (父子)")])]),v._v(" "),_("p",[v._v("父组件通过"),_("code",[v._v("props")]),v._v("向子组件传递数据，子组件通过"),_("code",[v._v("$emit")]),v._v("和父组件通信")]),v._v(" "),_("p",[_("strong",[v._v("1. 父组件向子组件传值")])]),v._v(" "),_("p",[_("code",[v._v("props")]),v._v("只能是父组件向子组件进行传值，"),_("code",[v._v("props")]),v._v("使得父子组件之间形成了一个单向下行绑定。子组件的数据会随着父组件不断更新。")]),v._v(" "),_("p",[_("code",[v._v("props")]),v._v(" 可以显示定义一个或一个以上的数据，对于接收的数据，可以是各种数据类型，同样也可以传递一个函数。")]),v._v(" "),_("p",[_("code",[v._v("props")]),v._v("属性名规则：若在"),_("code",[v._v("props")]),v._v("中使用驼峰形式，模板中需要使用短横线的形式")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c606c1619f644618b686d4abfdd8e256~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-10-07_10-23-21.png"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/428cbedd97c547a080eac446c0c81a18~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-10-07_10-23-33.png"}})]),v._v(" "),_("p",[_("strong",[v._v("2. 子组件向父组件传值")])]),v._v(" "),_("ul",[_("li",[_("code",[v._v("$emit")]),v._v("绑定一个自定义事件，当这个事件被执行的时就会将参数传递给父组件，而父组件通过"),_("code",[v._v("v-on")]),v._v("监听并接收参数。")])]),v._v(" "),_("h3",{attrs:{id:"_2-依赖注入-provide-inject-父子、祖孙"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-依赖注入-provide-inject-父子、祖孙"}},[v._v("#")]),v._v(" （2）依赖注入 provide / inject（父子、祖孙）")]),v._v(" "),_("p",[v._v("这种方式就是Vue中的"),_("strong",[v._v("依赖注入")]),v._v("，该方法用于"),_("strong",[v._v("父子组件之间的通信")]),v._v("。当然这里所说的父子不一定是真正的父子，也可以是祖孙组件，在层数很深的情况下，可以使用这种方法来进行传值。就不用一层一层的传递了。")]),v._v(" "),_("p",[_("code",[v._v("provide / inject")]),v._v("是Vue提供的两个钩子，和"),_("code",[v._v("data")]),v._v("、"),_("code",[v._v("methods")]),v._v("是同级的。并且"),_("code",[v._v("provide")]),v._v("的书写形式和"),_("code",[v._v("data")]),v._v("一样。")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("provide")]),v._v(" 钩子用来发送数据或方法")]),v._v(" "),_("li",[_("code",[v._v("inject")]),v._v("钩子用来接收数据或方法")])]),v._v(" "),_("p",[v._v("在父组件中：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66f3f6174c2e40a3a48dc628ca15f1d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"1.png"}})]),v._v(" "),_("p",[v._v("在子组件中：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f044d6d4dae4eb58da4154b1813658c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"2.png"}})]),v._v(" "),_("p",[v._v("还可以这样写，这样写就可以访问父组件中的所有属性：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/248a3d57941c4742a9a52e1fdcd47b7c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"3.png"}})]),v._v(" "),_("p",[_("strong",[v._v("注意：")]),v._v(" 依赖注入所提供的属性是"),_("strong",[v._v("非响应式")]),v._v("的。")]),v._v(" "),_("h3",{attrs:{id:"_3-ref-refs-父子-兄弟"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-ref-refs-父子-兄弟"}},[v._v("#")]),v._v(" （3）ref / $refs （父子，兄弟）")]),v._v(" "),_("p",[_("code",[v._v("ref")]),v._v("： 这个属性用在子组件上，它的引用就指向了子组件的实例。可以通过实例来访问组件的数据和方法。")]),v._v(" "),_("p",[v._v("这种方式也是实现"),_("strong",[v._v("兄弟组件")]),v._v("之间的通信。子组件1通过"),_("strong",[v._v("this."),_("code",[v._v("$emit")]),_("strong",[v._v("通知父组件调用函数，父组件的函数里用")]),v._v("this.$refs")]),v._v("拿到子组件2的方法，这样就实现兄弟组件之间的通信。")]),v._v(" "),_("p",[v._v("在子组件中：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b9498b359f940e5bfffe143bb8b367f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"4.png"}})]),v._v(" "),_("p",[v._v("在父组件中：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e236198198d497d844f0c1c6a091921~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"5.png"}})]),v._v(" "),_("h3",{attrs:{id:"_4-parent-children-父子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-parent-children-父子"}},[v._v("#")]),v._v(" （4）"),_("code",[v._v("$parent")]),v._v(" / "),_("code",[v._v("$children")]),v._v(" (父子)")]),v._v(" "),_("ul",[_("li",[v._v("使用"),_("code",[v._v("$parent")]),v._v("可以让组件访问父组件的实例（访问的是上一级父组件的属性和方法）")]),v._v(" "),_("li",[v._v("使用"),_("code",[v._v("$children")]),v._v("可以让组件访问子组件的实例，但是，"),_("code",[v._v("$children")]),v._v("并不能保证顺序，并且访问的数据也不是响应式的。")])]),v._v(" "),_("p",[v._v("在子组件中：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5bce028300843cba63a8588c822b3ae~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"6.png"}})]),v._v(" "),_("p",[v._v("在父组件中：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1b0b23799bf4c55a5abf78488295543~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"7.png"}})]),v._v(" "),_("p",[v._v("在上面的代码中，子组件获取到了父组件的"),_("code",[v._v("parentVal")]),v._v("值，父组件改变了子组件中"),_("code",[v._v("message")]),v._v("的值。 "),_("strong",[v._v("需要注意：")])]),v._v(" "),_("ul",[_("li",[v._v("通过"),_("code",[v._v("$parent")]),v._v("访问到的是上一级父组件的实例，可以使用"),_("code",[v._v("$root")]),v._v("来访问根组件的实例")]),v._v(" "),_("li",[v._v("在组件中使用"),_("code",[v._v("$children")]),v._v("拿到的是所有的子组件的实例，它是一个数组，并且是无序的")]),v._v(" "),_("li",[v._v("在根组件"),_("code",[v._v("#app")]),v._v("上拿"),_("code",[v._v("$parent")]),v._v("得到的是"),_("code",[v._v("new Vue()")]),v._v("的实例，在这实例上再拿"),_("code",[v._v("$parent")]),v._v("得到的是"),_("code",[v._v("undefined")]),v._v("，而在最底层的子组件拿"),_("code",[v._v("$children")]),v._v("是个空数组")]),v._v(" "),_("li",[_("code",[v._v("$children")]),v._v(" 的值是"),_("strong",[v._v("数组")]),v._v("，而"),_("code",[v._v("$parent")]),v._v("是个"),_("strong",[v._v("对象")])])]),v._v(" "),_("h3",{attrs:{id:"_5-attrs-listeners-祖孙"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-attrs-listeners-祖孙"}},[v._v("#")]),v._v(" （5）"),_("code",[v._v("$attrs")]),v._v(" / "),_("code",[v._v("$listeners")]),v._v(" (祖孙)")]),v._v(" "),_("p",[v._v("考虑一种场景，如果A是B组件的父组件，B是C组件的父组件。如果想要组件A给组件C传递数据，这种隔代的数据，该使用哪种方式呢？")]),v._v(" "),_("p",[v._v("如果是用"),_("code",[v._v("props/$emit")]),v._v("来一级一级的传递，确实可以完成，但是比较复杂；如果使用事件总线，在多人开发或者项目较大的时候，维护起来很麻烦；如果使用Vuex，的确也可以，但是如果仅仅是传递数据，那可能就有点浪费了。")]),v._v(" "),_("p",[v._v("针对上述情况，Vue引入了"),_("code",[v._v("$attrs / $listeners")]),v._v("，实现组件之间的跨代通信。")]),v._v(" "),_("p",[v._v("先来看一下"),_("code",[v._v("inheritAttrs")]),v._v("，它的默认值true，继承所有的父组件属性除"),_("code",[v._v("props")]),v._v("之外的所有属性；"),_("code",[v._v("inheritAttrs：false")]),v._v(" 只继承class属性 。")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("$attrs")]),v._v("：继承所有的父组件属性（除了prop传递的属性、class 和 style ），一般用在子组件的子元素上")]),v._v(" "),_("li",[_("code",[v._v("$listeners")]),v._v("：该属性是一个对象，里面包含了作用在这个组件上的所有监听器，可以配合 "),_("code",[v._v('v-on="$listeners"')]),v._v(" 将所有的事件监听器指向这个组件的某个特定的子元素。（相当于子组件继承父组件的事件）")])]),v._v(" "),_("p",[v._v("A组件（"),_("code",[v._v("APP.vue")]),v._v("）：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/232791e5abba45b7895ee40944162b6c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"8.png"}})]),v._v(" "),_("p",[v._v("B组件（"),_("code",[v._v("Child1.vue")]),v._v("）：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e403a31494894a52b507e4f6ee115500~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"9.png"}})]),v._v(" "),_("p",[v._v("C 组件 ("),_("code",[v._v("Child2.vue")]),v._v(")：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb0a3c35039847a58fb6d8280bd2d5ff~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"10.png"}})]),v._v(" "),_("p",[v._v("在上述代码中：")]),v._v(" "),_("ul",[_("li",[v._v("C组件中能直接触发test的原因在于 B组件调用C组件时 使用 v-on 绑定了"),_("code",[v._v("$listeners")]),v._v(" 属性")]),v._v(" "),_("li",[v._v("在B组件中通过v-bind 绑定"),_("code",[v._v("$attrs")]),v._v("属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的）")])]),v._v(" "),_("h3",{attrs:{id:"_6-eventbus事件总线-emit-on-任意组件通信"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-eventbus事件总线-emit-on-任意组件通信"}},[v._v("#")]),v._v(" （6）eventBus事件总线（"),_("code",[v._v("$emit / $on")]),v._v("）（任意组件通信）")]),v._v(" "),_("p",[_("code",[v._v("eventBus")]),v._v("事件总线适用于"),_("strong",[v._v("父子组件")]),v._v("、"),_("strong",[v._v("非父子组件")]),v._v("等之间的通信，使用步骤如下：")]),v._v(" "),_("p",[_("strong",[v._v("（1）创建事件中心管理组件之间的通信")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd9993c134b84a788b8bbf212c189dc0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"11.png"}})]),v._v(" "),_("p",[_("strong",[v._v("（2）发送事件")]),v._v(" 假设有两个兄弟组件"),_("code",[v._v("firstCom")]),v._v("和"),_("code",[v._v("secondCom")]),v._v("：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7711b36f31a7464f983c936df57bed2a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"12.png"}})]),v._v(" "),_("p",[v._v("在"),_("code",[v._v("firstCom")]),v._v("组件中发送事件：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6c64ee6cf2b4c17a89ecf172fc08d02~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"13.png"}})]),v._v(" "),_("p",[_("strong",[v._v("（3）接收事件")]),v._v(" 在"),_("code",[v._v("secondCom")]),v._v("组件中接收事件：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/809767d82f5e46ecbbeaa6eee42f5ee8~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"14.png"}})]),v._v(" "),_("p",[v._v("在上述代码中，这就相当于将"),_("code",[v._v("num")]),v._v("值存贮在了事件总线中，在其他组件中可以直接访问。事件总线就相当于一个桥梁，不用组件通过它来通信。")]),v._v(" "),_("p",[v._v("虽然看起来比较简单，但是这种方法也有不变之处，如果项目过大，使用这种方式进行通信，后期维护起来会很困难。")]),v._v(" "),_("h3",{attrs:{id:"_7-总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-总结"}},[v._v("#")]),v._v(" （7）总结")]),v._v(" "),_("p",[_("strong",[v._v("（1）父子组件间通信")])]),v._v(" "),_("ul",[_("li",[v._v("子组件通过 props 属性来接受父组件的数据，然后父组件在子组件上注册监听事件，子组件通过 emit 触发事件来向父组件发送数据。")]),v._v(" "),_("li",[v._v("通过 ref 属性给子组件设置一个名字。父组件通过 "),_("code",[v._v("$refs")]),v._v(" 组件名来获得子组件，子组件通过 "),_("code",[v._v("$parent")]),v._v(" 获得父组件，这样也可以实现通信。")]),v._v(" "),_("li",[v._v("使用 provide/inject，在父组件中通过 provide提供变量，在子组件中通过 inject 来将变量注入到组件中。不论子组件有多深，只要调用了 inject 那么就可以注入 provide中的数据。")])]),v._v(" "),_("p",[_("strong",[v._v("（2）兄弟组件间通信")])]),v._v(" "),_("ul",[_("li",[v._v("使用 eventBus 的方法，它的本质是通过创建一个空的 Vue 实例来作为消息传递的对象，通信的组件引入这个实例，通信的组件通过在这个实例上监听和触发事件，来实现消息的传递。")]),v._v(" "),_("li",[v._v("通过 "),_("code",[v._v("$parent/$refs")]),v._v(" 来获取到兄弟组件，也可以进行通信。")])]),v._v(" "),_("p",[_("strong",[v._v("（3）任意组件之间")])]),v._v(" "),_("ul",[_("li",[v._v("使用 eventBus ，其实就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。")])]),v._v(" "),_("p",[v._v("如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候采用上面这一些方法可能不利于项目的维护。这个时候可以使用 vuex ，vuex 的思想就是将这一些公共的数据抽离出来，将它作为一个全局的变量来管理，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。")]),v._v(" "),_("h2",{attrs:{id:"_20-子组件可以直接改变父组件的数据吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_20-子组件可以直接改变父组件的数据吗"}},[v._v("#")]),v._v(" 20. 子组件可以直接改变父组件的数据吗？")]),v._v(" "),_("p",[v._v("子组件不可以直接改变父组件的数据。这样做主要是为了维护父子组件的单向数据流。每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。如果这样做了，Vue 会在浏览器的控制台中发出警告。")]),v._v(" "),_("p",[v._v("Vue提倡单向数据流，即父级 props 的更新会流向子组件，但是反过来则不行。这是为了防止意外的改变父组件状态，使得应用的数据流变得难以理解，导致数据流混乱。如果破坏了单向数据流，当应用复杂时，debug 的成本会非常高。")]),v._v(" "),_("p",[_("strong",[v._v("只能通过 "),_("code",[v._v("$emit")]),v._v(" 派发一个自定义事件，父组件接收到后，由父组件修改。")])]),v._v(" "),_("h2",{attrs:{id:"_21-生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_21-生命周期"}},[v._v("#")]),v._v(" 21. 生命周期")]),v._v(" "),_("h3",{attrs:{id:"_1-说一下vue的生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-说一下vue的生命周期"}},[v._v("#")]),v._v(" (1). 说一下Vue的生命周期")]),v._v(" "),_("p",[v._v("vue 实例从创建到销毁的过程就是生命周期。")]),v._v(" "),_("p",[v._v("也就是从开始创建、初始化数据、编译模板、挂在 dom -> 渲染、更新 -> 渲染、准备销毁、销毁在等一系列过程")]),v._v(" "),_("p",[v._v("vue的声明周期常见的主要分为4大阶段8大钩子函数")]),v._v(" "),_("p",[_("strong",[v._v("第一阶段：创建前 / 后")])]),v._v(" "),_("p",[_("strong",[v._v("beforeCreate（创建前）")]),v._v(" ：数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。")]),v._v(" "),_("p",[_("strong",[v._v("created（创建后）")]),v._v(" ：实例创建完成，实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 "),_("code",[v._v("$el")]),v._v(" 属性。")]),v._v(" "),_("p",[_("strong",[v._v("第二阶段: 渲染前 / 后")])]),v._v(" "),_("p",[_("strong",[v._v("beforeMount（挂载前）")]),v._v(" ：在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。此时还没有挂载html到页面上。")]),v._v(" "),_("p",[_("strong",[v._v("mounted（挂载后）")]),v._v(" ：在el被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html 页面中。此过程中进行ajax交互。")]),v._v(" "),_("p",[_("strong",[v._v("第三阶段: 更新前 / 后")])]),v._v(" "),_("p",[_("strong",[v._v("beforeUpdate（更新前）")]),v._v(" ：响应式数据更新时调用，此时虽然响应式数据更新了，但是对应的真实 DOM 还没有被渲染。")]),v._v(" "),_("p",[_("strong",[v._v("updated（更新后）")]),v._v(" ：在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。此时 DOM 已经根据响应式数据的变化更新了。调用时，组件 DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。")]),v._v(" "),_("p",[_("strong",[v._v("第四阶段: 销毁前 / 后")])]),v._v(" "),_("p",[_("strong",[v._v("beforeDestroy（销毁前）")]),v._v(" ：实例销毁之前调用。这一步，实例仍然完全可用，"),_("code",[v._v("this")]),v._v(" 仍能获取到实例。")]),v._v(" "),_("p",[_("strong",[v._v("destroyed（销毁后）")]),v._v(" ：实例销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务端渲染期间不被调用。")]),v._v(" "),_("p",[_("strong",[v._v("另外三个生命周期函数不常用")])]),v._v(" "),_("p",[v._v("另外还有 "),_("code",[v._v("keep-alive")]),v._v(" 独有的生命周期，分别为 "),_("code",[v._v("activated")]),v._v(" 和 "),_("code",[v._v("deactivated")]),v._v(" 。用 "),_("code",[v._v("keep-alive")]),v._v(" 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 "),_("code",[v._v("deactivated")]),v._v(" 钩子函数，命中缓存渲染后会执行 "),_("code",[v._v("activated")]),v._v(" 钩子函数。")]),v._v(" "),_("p",[_("code",[v._v("errorCapured")]),v._v("钩子，当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 "),_("code",[v._v("false")]),v._v(" 以阻止该错误继续向上传播。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89deb213d6fe4b64b0724f1cb1e09978~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-08-11_21-23-58.jpg"}})]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4c77dcde01e14cfc9bcc0c1550d471df~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-08-11_21-24-17.jpg"}})]),v._v(" "),_("h3",{attrs:{id:"_2-vue-子组件和父组件执行顺序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue-子组件和父组件执行顺序"}},[v._v("#")]),v._v(" (2). Vue 子组件和父组件执行顺序")]),v._v(" "),_("p",[_("strong",[v._v("加载渲染过程：")])]),v._v(" "),_("ol",[_("li",[v._v("父组件 beforeCreate")]),v._v(" "),_("li",[v._v("父组件 created")]),v._v(" "),_("li",[v._v("父组件 beforeMount")]),v._v(" "),_("li",[v._v("子组件 beforeCreate")]),v._v(" "),_("li",[v._v("子组件 created")]),v._v(" "),_("li",[v._v("子组件 beforeMount")]),v._v(" "),_("li",[v._v("子组件 mounted")]),v._v(" "),_("li",[v._v("父组件 mounted")])]),v._v(" "),_("p",[_("strong",[v._v("更新过程：")])]),v._v(" "),_("ol",[_("li",[v._v("父组件 beforeUpdate")]),v._v(" "),_("li",[v._v("子组件 beforeUpdate")]),v._v(" "),_("li",[v._v("子组件 updated")]),v._v(" "),_("li",[v._v("父组件 updated")])]),v._v(" "),_("p",[_("strong",[v._v("销毁过程：")])]),v._v(" "),_("ol",[_("li",[v._v("父组件 beforeDestroy")]),v._v(" "),_("li",[v._v("子组件 beforeDestroy")]),v._v(" "),_("li",[v._v("子组件 destroyed")]),v._v(" "),_("li",[v._v("父组件 destoryed")])]),v._v(" "),_("h3",{attrs:{id:"_3-created和mounted的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-created和mounted的区别"}},[v._v("#")]),v._v(" (3). created和mounted的区别")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("created")]),v._v(":在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。")]),v._v(" "),_("li",[_("code",[v._v("mounted")]),v._v(":在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。")])]),v._v(" "),_("h3",{attrs:{id:"_4-一般在哪个生命周期请求异步数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-一般在哪个生命周期请求异步数据"}},[v._v("#")]),v._v(" (4). 一般在哪个生命周期请求异步数据")]),v._v(" "),_("p",[v._v("我们可以在钩子函数"),_("code",[v._v("created")]),v._v("、"),_("code",[v._v("beforeMount")]),v._v("、"),_("code",[v._v("mounted")]),v._v(" 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。")]),v._v(" "),_("p",[v._v("推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：")]),v._v(" "),_("ul",[_("li",[v._v("能更快获取到服务端数据，减少页面加载时间，用户体验更好；")]),v._v(" "),_("li",[v._v("SSR不支持 beforeMount 、mounted 钩子函数，放在 created 中有助于一致性。")])]),v._v(" "),_("h2",{attrs:{id:"_22-组件缓存-keep-alive"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_22-组件缓存-keep-alive"}},[v._v("#")]),v._v(" 22. 组件缓存 keep-alive")]),v._v(" "),_("p",[_("strong",[v._v("组件缓存")])]),v._v(" "),_("p",[v._v("组件的缓存可以在进行动态组件切换的时候对组件内部数据进行缓存,而不是走销毁流程")]),v._v(" "),_("p",[v._v("使用场景: 多表单切换,对表单内数据进行保存")]),v._v(" "),_("p",[_("strong",[v._v("keep-alive")])]),v._v(" "),_("p",[v._v("包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。")]),v._v(" "),_("p",[v._v("是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。 当组件在"),_("code",[v._v("<keep-alive>")]),v._v("内被切换，它的"),_("code",[v._v("activated")]),v._v("和 "),_("code",[v._v("deactivated")]),v._v("这两个生命周期钩子函数将会被对应执行 。")]),v._v(" "),_("h3",{attrs:{id:"keep-alive的参数-include-exclude"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive的参数-include-exclude"}},[v._v("#")]),v._v(" keep-alive的参数(include,exclude)")]),v._v(" "),_("ul",[_("li",[v._v("include(包含): 名称匹配的组件会被缓存--\x3einclude的值为组件的name。")]),v._v(" "),_("li",[v._v("exclude(排除): 任何名称匹配的组件都不会被缓存。")]),v._v(" "),_("li",[v._v("max - 数量 决定最多可以缓存多少组件。")])]),v._v(" "),_("h3",{attrs:{id:"keep-alive的使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive的使用"}},[v._v("#")]),v._v(" "),_("strong",[v._v("keep-alive的使用")])]),v._v(" "),_("ol",{attrs:{start:"0"}},[_("li",[_("p",[v._v("搭配"),_("code",[v._v("<component></component>")]),v._v("使用")])]),v._v(" "),_("li",[_("p",[v._v("搭配路由使用 ( 需配置路由meta信息的"),_("code",[v._v("keepAlive")]),v._v("属性 )")])]),v._v(" "),_("li",[_("p",[v._v("清除缓存组件")]),v._v(" "),_("ul",[_("li",[v._v("在组件跳转之前使用后置路由守卫判断组件是否缓存")]),v._v(" "),_("li",[v._v("( beforeRouteLeave( to, from, next ){ from.meta.keepAlive = false }")])])])]),v._v(" "),_("h3",{attrs:{id:"keep-alive的两个钩子函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive的两个钩子函数"}},[v._v("#")]),v._v(" "),_("strong",[v._v("keep-alive的两个钩子函数")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("activated")]),v._v(" "),_("th",[v._v("deactivated")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("在 "),_("code",[v._v("keep-alive")]),v._v(" 组件激活时调用")]),v._v(" "),_("td",[v._v("在"),_("code",[v._v("keep-alive")]),v._v(" 组件停用时调用")])]),v._v(" "),_("tr",[_("td",[v._v("该钩子函数在服务器端渲染期间不被调用")]),v._v(" "),_("td",[v._v("该钩子在服务器端渲染期间不被调用")])])])]),v._v(" "),_("p",[v._v("使用"),_("code",[v._v("keep-alive")]),v._v("会将数据保留在内存中，如果要在每次进入页面的时候获取最新的数据，需要在 "),_("code",[v._v("activated")]),v._v("阶段获取数据，承担原来"),_("code",[v._v("created")]),v._v("钩子函数中获取数据的任务。")]),v._v(" "),_("p",[_("strong",[v._v("注意：")]),v._v(" 只有组件被"),_("code",[v._v("keep-alive")]),v._v("包裹时，这两个生命周期函数才会被调用，如果作为正常组件使用，是不会被调用的")]),v._v(" "),_("p",[v._v("使用 exclude 排除之后，就算被包裹在 keep-alive 中，这两个钩子函数依然不会被调用！在服务端渲染时，此钩子函数也不会被调用。")]),v._v(" "),_("p",[v._v("设置了缓存的组件钩子调用情况：")]),v._v(" "),_("p",[v._v("第一次进入：beforeRouterEnter ->created->…->activated->…->deactivated> beforeRouteLeave")]),v._v(" "),_("p",[v._v("后续进入时：beforeRouterEnter ->activated->deactivated> beforeRouteLeave")]),v._v(" "),_("h3",{attrs:{id:"keep-alive主要流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive主要流程"}},[v._v("#")]),v._v(" "),_("strong",[v._v("keep-alive主要流程")])]),v._v(" "),_("ol",[_("li",[v._v("判断组件 name ，不在 include 或者在 exclude 中，直接返回 vnode，说明该组件不被缓存。")]),v._v(" "),_("li",[v._v("获取组件实例 key ，如果有获取实例的 key，否则重新生成。")]),v._v(" "),_("li",[v._v('key生成规则，cid +"∶∶"+ tag ，仅靠cid是不够的，因为相同的构造函数可以注册为不同的本地组件。')]),v._v(" "),_("li",[v._v("如果缓存对象内存在，则直接从缓存对象中获取组件实例给 vnode ，不存在则添加到缓存对象中。 5.最大缓存数量，当缓存组件数量超过 max 值时，清除 keys 数组内第一个组件。")])]),v._v(" "),_("h3",{attrs:{id:"keep-alive-的实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive-的实现"}},[v._v("#")]),v._v(" "),_("strong",[v._v("keep-alive 的实现")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/846880f48f1e450198f2e28444d0f6a9~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-08-11_21-33-22.jpg"}})]),v._v(" "),_("h2",{attrs:{id:"_23-过滤器的作用-如何实现一个过滤器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_23-过滤器的作用-如何实现一个过滤器"}},[v._v("#")]),v._v(" 23. 过滤器的作用，如何实现一个过滤器")]),v._v(" "),_("p",[v._v("根据过滤器的名称，过滤器是用来过滤数据的，在Vue中使用"),_("code",[v._v("filters")]),v._v("来过滤数据，"),_("code",[v._v("filters")]),v._v("不会修改数据，而是过滤数据，改变用户看到的输出（计算属性 "),_("code",[v._v("computed")]),v._v(" ，方法 "),_("code",[v._v("methods")]),v._v(" 都是通过修改数据来处理数据格式的输出显示）。")]),v._v(" "),_("p",[_("strong",[v._v("使用场景：")])]),v._v(" "),_("ul",[_("li",[v._v("需要格式化数据的情况，比如需要处理时间、价格等数据格式的输出 / 显示。")]),v._v(" "),_("li",[v._v("比如后端返回一个 "),_("strong",[v._v("年月日的日期字符串")]),v._v("，前端需要展示为 "),_("strong",[v._v("多少天前")]),v._v(" 的数据格式，此时就可以用"),_("code",[v._v("fliters")]),v._v("过滤器来处理数据。")])]),v._v(" "),_("p",[v._v("过滤器是一个函数，它会把表达式中的值始终当作函数的第一个参数。过滤器用在"),_("strong",[v._v("插值表达式 "+v._s()+" 和 v-bind 表达式")]),v._v(" 中，然后放在操作符“ "),_("code",[v._v("|")]),v._v(" ”后面进行指示。")]),v._v(" "),_("p",[v._v("例如，在显示金额，给商品价格添加单位：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03181bad44724bb48bd1b651aa66851a~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"15.png"}})]),v._v(" "),_("h2",{attrs:{id:"_24-说说你对slot插槽的理解-slot使用场景有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_24-说说你对slot插槽的理解-slot使用场景有哪些"}},[v._v("#")]),v._v(" 24. 说说你对slot插槽的理解？slot使用场景有哪些？")]),v._v(" "),_("h3",{attrs:{id:"slot是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#slot是什么"}},[v._v("#")]),v._v(" "),_("strong",[v._v("slot是什么")])]),v._v(" "),_("p",[_("code",[v._v("slot")]),v._v("又名插槽，"),_("strong",[v._v("是Vue的内容分发机制")]),v._v("，组件内部的模板引擎使用slot元素作为承载分发内容的出口。插槽slot是子组件的一个模板标签元素，而这一个标签元素是否显示，以及怎么显示是由父组件决定的。")]),v._v(" "),_("p",[v._v("通过插槽可以让用户可以拓展组件，去更好地复用组件和对其做定制化处理")]),v._v(" "),_("p",[v._v("通过"),_("code",[v._v("slot")]),v._v("插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用")]),v._v(" "),_("p",[v._v("比如布局组件、表格列、下拉选、弹框显示内容等")]),v._v(" "),_("p",[_("strong",[v._v("分类")])]),v._v(" "),_("h3",{attrs:{id:"默认插槽"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#默认插槽"}},[v._v("#")]),v._v(" "),_("strong",[v._v("默认插槽")])]),v._v(" "),_("p",[v._v("子组件用"),_("code",[v._v("<slot>")]),v._v("标签来确定渲染的位置，标签里面可以放"),_("code",[v._v("DOM")]),v._v("结构，当父组件使用的时候没有往插槽传入内容，标签内"),_("code",[v._v("DOM")]),v._v("结构就会显示在页面")]),v._v(" "),_("p",[v._v("父组件在使用的时候，直接在子组件的标签内写入内容即可")]),v._v(" "),_("h3",{attrs:{id:"具名插槽"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#具名插槽"}},[v._v("#")]),v._v(" "),_("strong",[v._v("具名插槽")])]),v._v(" "),_("p",[v._v("子组件用"),_("code",[v._v("name")]),v._v("属性来表示插槽的名字，不传为默认插槽")]),v._v(" "),_("p",[v._v("父组件中在使用时在默认插槽的基础上加上"),_("code",[v._v("slot")]),v._v("属性，值为子组件插槽"),_("code",[v._v("name")]),v._v("属性值")]),v._v(" "),_("h3",{attrs:{id:"作用域插槽"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#作用域插槽"}},[v._v("#")]),v._v(" "),_("strong",[v._v("作用域插槽")])]),v._v(" "),_("p",[v._v("子组件在作用域上绑定属性来将子组件的信息传给父组件使用，这些属性会被挂在父组件"),_("code",[v._v("v-slot")]),v._v("接受的对象上")]),v._v(" "),_("p",[v._v("父组件中在使用时通过"),_("code",[v._v("v-slot:")]),v._v("（简写：#）获取子组件的信息，在内容中使用")]),v._v(" "),_("h3",{attrs:{id:"小结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" "),_("strong",[v._v("小结")])]),v._v(" "),_("ul",[_("li",[_("code",[v._v("v-slot")]),v._v("属性只能在"),_("code",[v._v("<template>")]),v._v("上使用，但在只有默认插槽时可以在组件标签上使用")]),v._v(" "),_("li",[v._v("默认插槽名为"),_("code",[v._v("default")]),v._v("，可以省略default直接写"),_("code",[v._v("v-slot")])]),v._v(" "),_("li",[v._v("缩写为"),_("code",[v._v("#")]),v._v("时不能不写参数，写成"),_("code",[v._v("#default")])]),v._v(" "),_("li",[v._v("可以通过解构获取"),_("code",[v._v("v-slot={user}")]),v._v("，还可以重命名"),_("code",[v._v('v-slot="{user: newName}"')]),v._v("和定义默认值"),_("code",[v._v("v-slot=\"{user = '默认值'}\"")])])]),v._v(" "),_("h2",{attrs:{id:"_25-vue为什么采用异步渲染呢"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_25-vue为什么采用异步渲染呢"}},[v._v("#")]),v._v(" 25. Vue为什么采用异步渲染呢？")]),v._v(" "),_("p",[_("code",[v._v("Vue")]),v._v(" 是组件级更新，如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染，所以为了性能，"),_("code",[v._v("Vue")]),v._v(" 会在本轮数据更新后，在异步更新视图。核心思想"),_("code",[v._v("nextTick")]),v._v(" 。")]),v._v(" "),_("p",[_("code",[v._v("dep.notify（）")]),v._v(" 通知 watcher进行更新，"),_("code",[v._v("subs[i].update")]),v._v(" 依次调用 watcher 的"),_("code",[v._v("update")]),v._v(" ，"),_("code",[v._v("queueWatcher")]),v._v(" 将watcher 去重放入队列， nextTick（"),_("code",[v._v("flushSchedulerQueue")]),v._v(" ）在下一tick中刷新watcher队列（异步）。")]),v._v(" "),_("h2",{attrs:{id:"_25-nexttick-原理及作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_25-nexttick-原理及作用"}},[v._v("#")]),v._v(" 25. $nextTick 原理及作用")]),v._v(" "),_("p",[v._v("其实一句话就可以把"),_("code",[v._v("$nextTick")]),v._v("这个东西讲明白：就是你放在"),_("code",[v._v("$nextTick")]),v._v("当中的操作不会立即执行，而是等数据更新、DOM更新完成之后再执行，这样我们拿到的肯定就是最新的了。")]),v._v(" "),_("p",[v._v("Vue的响应式并不是只数据发生变化之后，DOM就立刻发生变化，而是按照一定的策略进行DOM的更新。")]),v._v(" "),_("p",[v._v("DOM更新有两种选择，一个是在本次事件循环的最后进行一次DOM更新，另一种是把DOM更新放在下一轮的事件循环当中。Vue优先选择第一种，只有当环境不支持的时候才触发第二种机制。")]),v._v(" "),_("p",[v._v("虽然性能上提高了很多，但这个时候问题就出现了。我已经把数据改掉了，但是它的更新异步的，而我在获取的时候，它还没有来得及改，这个时候就需要用到nextTick")]),v._v(" "),_("p",[_("strong",[v._v("原理：")])]),v._v(" "),_("p",[_("strong",[v._v("Vue 的 nextTick 其本质是对 JavaScript 执行原理 "),_("code",[v._v("EventLoop")]),v._v(" 的一种应用。")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Vue2刚开始的时候, $nextTick是宏任务(setTimeout)，但是宏任务的性能太差。")])]),v._v(" "),_("li",[_("p",[v._v("后来改成了微任务Mutation Observer，但是还是有一些问题：")]),v._v(" "),_("ul",[_("li",[v._v("速度太快了，在一些特殊场景下，DOM还没更新就去获取了")]),v._v(" "),_("li",[v._v("兼容性不好，很多浏览器不支持")])])]),v._v(" "),_("li",[_("p",[v._v("后来又更新成了微宏并行阶段：先判断是否支持Mutation Observer，如果支持就使用，否则使用宏任务")])]),v._v(" "),_("li",[_("p",[v._v("Vue2.5版本之后，修复了微任务的那些问题，目前最新的$nextTick采用的是纯微任务。")])])]),v._v(" "),_("p",[v._v("由于Vue的DOM操作是异步的，所以，在上面的情况中，就要将DOM2获取数据的操作写在"),_("code",[v._v("$nextTick")]),v._v("中。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6276978f438f46bca595ef1b9e340578~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"16.png"}})]),v._v(" "),_("p",[v._v("所以，在以下情况下，会用到nextTick：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("在数据变化后执行的某个操作，而这个操作需要使用随数据变化而变化的DOM结构的时候，这个操作就需要方法在"),_("code",[v._v("nextTick()")]),v._v("的回调函数中。")])]),v._v(" "),_("li",[_("strong",[v._v("在vue生命周期中，如果在created()钩子进行DOM操作，也一定要放在"),_("code",[v._v("nextTick()")]),v._v("的回调函数中。")])])]),v._v(" "),_("p",[v._v("因为在created()钩子函数中，页面的DOM还未渲染，这时候也没办法操作DOM，所以，此时如果想要操作DOM，必须将操作的代码放在"),_("code",[v._v("nextTick()")]),v._v("的回调函数中。")]),v._v(" "),_("h2",{attrs:{id:"_26-描述下vue2的自定义指令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_26-描述下vue2的自定义指令"}},[v._v("#")]),v._v(" 26. 描述下Vue2的自定义指令")]),v._v(" "),_("p",[v._v("在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。 一般需要对DOM元素进行底层操作时使用，尽量只用来操作 DOM展示，不修改内部的值。当使用自定义指令直接修改 value 值时绑定v-model的值也不会同步更新；如必须修改可以在自定义指令中使用keydown事件，在vue组件中使用 change事件，回调中修改vue数据;")]),v._v(" "),_("p",[_("strong",[v._v("（1）自定义指令基本内容")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("全局定义："),_("code",[v._v('Vue.directive("focus",{})')])])]),v._v(" "),_("li",[_("p",[v._v("局部定义："),_("code",[v._v("directives:{focus:{}}")])])]),v._v(" "),_("li",[_("p",[v._v("钩子函数：指令定义对象提供钩子函数")]),v._v(" "),_("ol",[_("li",[_("div",{staticClass:"language-bash line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[v._v(" bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])])]),v._v(" "),_("li",[_("div",{staticClass:"language-auto line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v(" inSerted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）。\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])])]),v._v(" "),_("li",[_("div",{staticClass:"language-sql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-sql"}},[_("code",[v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("update")]),v._v("：所在组件的VNode更新时调用，但是可能发生在其子VNode更新之前调用。指令的值可能发生了改变，也可能没有。但是可以通过比较更新前后的值来忽略不必要的模板更新。\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])])]),v._v(" "),_("li",[_("div",{staticClass:"language-auto line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v(" ComponentUpdate：指令所在组件的 VNode及其子VNode全部更新后调用。\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])])]),v._v(" "),_("li",[_("div",{staticClass:"language-auto line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v(" unbind：只调用一次，指令与元素解绑时调用。\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])])])])]),v._v(" "),_("li",[_("p",[v._v("钩子函数的参数 ：")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("el：指令所绑定的元素，可以用来直接操作 DOM")])]),v._v(" "),_("li",[_("p",[v._v("bing： 一个对象，包含以下属性：")]),v._v(" "),_("ul",[_("li",[v._v("name: 指令名，不包括 v- 前缀。")]),v._v(" "),_("li",[v._v('value: 指令的绑定值， 例如： v-my-directive="1 + 1", value 的值是2。')]),v._v(" "),_("li",[v._v("oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated钩子中可用。无论值是否改变都可用。")]),v._v(" "),_("li",[v._v('expression: 绑定值的表达式或变量名。 例如 v-my-directive="1 + 1", expression 的值是 "1 + 1"。')]),v._v(" "),_("li",[v._v('arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 "foo"。')]),v._v(" "),_("li",[v._v("modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。")])])]),v._v(" "),_("li",[_("p",[v._v("vnode： 编译生成的虚拟节点")])]),v._v(" "),_("li",[_("p",[v._v("oldVnode：上一个虚拟节点（更新钩子函数中才有用）")])])])])]),v._v(" "),_("p",[_("strong",[v._v("（2）使用场景")])]),v._v(" "),_("ul",[_("li",[v._v("普通DOM元素进行底层操作的时候，可以使用自定义指令")]),v._v(" "),_("li",[v._v("自定义指令是用来操作DOM的。尽管Vue推崇数据驱动视图的理念，但并非所有情况都适合数据驱动。自定义指令就是一种有效的补充和扩展，不仅可用于定义任何的DOM操作，并且是可复用的。")])]),v._v(" "),_("p",[_("strong",[v._v("（3）使用案例")])]),v._v(" "),_("p",[v._v("初级应用：")]),v._v(" "),_("ul",[_("li",[v._v("鼠标聚焦")]),v._v(" "),_("li",[v._v("下拉菜单")]),v._v(" "),_("li",[v._v("相对时间转换")]),v._v(" "),_("li",[v._v("滚动动画")])]),v._v(" "),_("p",[v._v("高级应用：")]),v._v(" "),_("ul",[_("li",[v._v("自定义指令实现图片懒加载")]),v._v(" "),_("li",[v._v("自定义指令集成第三方插件")])]),v._v(" "),_("h2",{attrs:{id:"_27-简述-mixin、extends-的覆盖逻辑"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_27-简述-mixin、extends-的覆盖逻辑"}},[v._v("#")]),v._v(" 27. 简述 mixin、extends 的覆盖逻辑")]),v._v(" "),_("p",[_("strong",[v._v("（1）mixin 和 extends")]),v._v(" mixin 和 extends均是用于合并、拓展组件的，两者均通过 mergeOptions 方法实现合并。")]),v._v(" "),_("ul",[_("li",[v._v("mixins 接收一个混入对象的数组，其中混入对象可以像正常的实例对象一样包含实例选项，这些选项会被合并到最终的选项中。Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用。")]),v._v(" "),_("li",[v._v("extends 主要是为了便于扩展单文件组件，接收一个对象或构造函数。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c1220980f0b4116a3a4db1991a7db8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-08-12_09-13-37.jpg"}})]),v._v(" "),_("p",[_("strong",[v._v("（2）mergeOptions 的执行过程")])]),v._v(" "),_("ul",[_("li",[v._v("规范化选项（normalizeProps、normalizelnject、normalizeDirectives)")]),v._v(" "),_("li",[v._v("对未合并的选项，进行判断")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eeddefe3d5ca471f97fb6fd6ac9c71a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"Snipaste_2022-08-12_09-15-16.jpg"}})]),v._v(" "),_("ul",[_("li",[v._v("合并处理。根据一个通用 Vue 实例所包含的选项进行分类逐一判断合并，如 props、data、 methods、watch、computed、生命周期等，将合并结果存储在新定义的 options 对象里。")]),v._v(" "),_("li",[v._v("返回合并结果 options。")])]),v._v(" "),_("h3",{attrs:{id:"extend-有什么作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#extend-有什么作用"}},[v._v("#")]),v._v(" extend 有什么作用")]),v._v(" "),_("p",[v._v("这个 API 很少用到，作用是扩展组件生成一个构造器，通常会与 "),_("code",[v._v("$mount")]),v._v(" 一起使用。")]),v._v(" "),_("h3",{attrs:{id:"什么是-mixin"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-mixin"}},[v._v("#")]),v._v(" 什么是 mixin ？")]),v._v(" "),_("p",[v._v("Mixin 使我们能够为 Vue 组件编写可插拔和可重用的功能。")]),v._v(" "),_("p",[v._v("如果希望在多个组件之间重用一组组件选项，例如生命周期 hook、 方法等，则可以将其编写为 mixin，并在组件中简单的引用它。")]),v._v(" "),_("p",[v._v("然后将 mixin 的内容合并到组件中。如果你要在 mixin 中定义生命周期 hook，那么它在执行时将优化于组件自已的 hook。")]),v._v(" "),_("h3",{attrs:{id:"mixin-和-mixins-区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mixin-和-mixins-区别"}},[v._v("#")]),v._v(" mixin 和 mixins 区别")]),v._v(" "),_("p",[_("code",[v._v("mixin")]),v._v(" 用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。")]),v._v(" "),_("p",[v._v("虽然文档不建议在应用中直接使用 "),_("code",[v._v("mixin")]),v._v("，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的 "),_("code",[v._v("ajax")]),v._v(" 或者一些工具函数等等。")]),v._v(" "),_("p",[_("code",[v._v("mixins")]),v._v(" 应该是最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 "),_("code",[v._v("mixins")]),v._v(" 混入代码，比如上拉下拉加载数据这种逻辑等等。 另外需要注意的是 "),_("code",[v._v("mixins")]),v._v(" 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并。")]),v._v(" "),_("h2",{attrs:{id:"_28-data为什么是一个函数而不是对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_28-data为什么是一个函数而不是对象"}},[v._v("#")]),v._v(" 28. data为什么是一个函数而不是对象")]),v._v(" "),_("p",[v._v("对象为引用类型，当复用组件时，由于数据对象都指向同一个data对象，当在一个组件中修改data时，其他重用的组件中的data会同时被修改；而使用返回对象的函数，由于每次返回的都是一个新对象（Object的实例），引用地址不同，则不会出现这个问题。")]),v._v(" "),_("h2",{attrs:{id:"_29-动态给vue的data添加一个新的属性时会发生什么-怎样解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_29-动态给vue的data添加一个新的属性时会发生什么-怎样解决"}},[v._v("#")]),v._v(" 29. 动态给vue的data添加一个新的属性时会发生什么？怎样解决？")]),v._v(" "),_("p",[_("strong",[v._v("问题:")]),v._v(" 数据虽然更新了, 但是页面没有更新")]),v._v(" "),_("p",[_("strong",[v._v("原因:")])]),v._v(" "),_("ol",{attrs:{start:"0"}},[_("li",[_("code",[v._v("vue2")]),v._v("是用过"),_("code",[v._v("Object.defineProperty")]),v._v("实现数据响应式")]),v._v(" "),_("li",[v._v("当我们访问定义的属性或者修改属性值的时候都能够触发"),_("code",[v._v("setter")]),v._v("与"),_("code",[v._v("getter")])]),v._v(" "),_("li",[v._v("但是我们为"),_("code",[v._v("obj")]),v._v("添加新属性的时候，却无法触发事件属性的拦截")]),v._v(" "),_("li",[v._v("原因是一开始"),_("code",[v._v("obj")]),v._v("的要定义的属性被设成了响应式数据，而"),_("code",[v._v("新增的属性")]),v._v("并没有通过"),_("code",[v._v("Object.defineProperty")]),v._v("设置成响应式数据")])]),v._v(" "),_("p",[_("strong",[v._v("解决方案:")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("Vue.set()")]),v._v(" "),_("ul",[_("li",[v._v("通过"),_("code",[v._v("Vue.set")]),v._v("向响应式对象中添加一个"),_("code",[v._v("property")]),v._v("，并确保这个新 "),_("code",[v._v("property")]),v._v("同样是响应式的，且触发视图更新")])])]),v._v(" "),_("li",[_("p",[v._v("Object.assign()")]),v._v(" "),_("ul",[_("li",[v._v("直接使用"),_("code",[v._v("Object.assign()")]),v._v("添加到对象的新属性不会触发更新")]),v._v(" "),_("li",[v._v("应创建一个新的对象，合并原对象和混入对象的属性")])])]),v._v(" "),_("li",[_("p",[v._v("$forceUpdate")]),v._v(" "),_("ul",[_("li",[v._v("如果你发现你自己需要在 "),_("code",[v._v("Vue")]),v._v("中做一次强制更新，99.9% 的情况，是你在某个地方做错了事")]),v._v(" "),_("li",[_("code",[v._v("$forceUpdate")]),v._v("迫使"),_("code",[v._v("Vue")]),v._v(" 实例重新渲染")]),v._v(" "),_("li",[v._v("PS：仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。")])])])]),v._v(" "),_("p",[v._v("总结")]),v._v(" "),_("ul",[_("li",[v._v("如果为对象添加"),_("strong",[v._v("少量")]),v._v("的新属性，可以直接采用"),_("code",[v._v("Vue.set()")])]),v._v(" "),_("li",[v._v("如果需要为新对象添加"),_("strong",[v._v("大量")]),v._v("的新属性，则通过"),_("code",[v._v("Object.assign()")]),v._v("创建新对象")]),v._v(" "),_("li",[v._v("如果你实在不知道怎么操作时，可采取"),_("code",[v._v("$forceUpdate()")]),v._v("进行强制刷新 (不建议)")])]),v._v(" "),_("p",[v._v("PS："),_("code",[v._v("vue3")]),v._v("是用过"),_("code",[v._v("proxy")]),v._v("实现数据响应式的，直接动态添加新属性仍可以实现数据响应式")]),v._v(" "),_("h2",{attrs:{id:"_30-vue-data-中某一个属性的值发生改变后-视图会立即同步执行重新渲染吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_30-vue-data-中某一个属性的值发生改变后-视图会立即同步执行重新渲染吗"}},[v._v("#")]),v._v(" 30. Vue data 中某一个属性的值发生改变后，视图会立即同步执行重新渲染吗")]),v._v(" "),_("p",[_("strong",[v._v("不会立即同步执行重新渲染")]),v._v("。Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。Vue 在更新 DOM 时是"),_("code",[v._v("异步")]),v._v("执行的。只要侦听到数据变化， Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。")]),v._v(" "),_("p",[v._v("如果同一个watcher被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环tick中，Vue 刷新队列并执行实际（已去重的）工作。")]),v._v(" "),_("h2",{attrs:{id:"_31-vue如何监听-检测-对象或者数组某个属性的变化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_31-vue如何监听-检测-对象或者数组某个属性的变化"}},[v._v("#")]),v._v(" 31. vue如何监听(检测)对象或者数组某个属性的变化")]),v._v(" "),_("p",[v._v("当在项目中直接设置数组的某一项的值，或者直接设置对象的某个属性值，这个时候，你会发现页面并没有更新。这是因为Object.defineProperty()限制，监听不到变化。")]),v._v(" "),_("p",[v._v("解决方式：")]),v._v(" "),_("ul",[_("li",[v._v("this.$set(你要改变的数组/对象，你要改变的位置/key，你要改成什么value)")])]),v._v(" "),_("div",{staticClass:"language-kotlin line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-kotlin"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("$"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("set")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("arr"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[_("span",{pre:!0,attrs:{class:"token string"}},[v._v('"OBKoro1"')])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 改变数组")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("$"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("set")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("obj"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[_("span",{pre:!0,attrs:{class:"token string"}},[v._v('"c"')])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token string-literal singleline"}},[_("span",{pre:!0,attrs:{class:"token string"}},[v._v('"OBKoro1"')])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 改变对象")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("ul",[_("li",[v._v("调用以下几个数组的方法")])]),v._v(" "),_("div",{staticClass:"language-scss line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-scss"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[v._v("splice")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("、 "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("push")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("、"),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("pop")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("、"),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("shift")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("、"),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("unshift")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("、"),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("sort")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("、"),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("reverse")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" \n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br")])]),_("p",[v._v("vue源码里缓存了array的原型链，然后重写了这几个方法，触发这几个方法的时候会observer数据，意思是使用这些方法不用我们再进行额外的操作，视图自动进行更新。 推荐使用splice方法会比较好自定义,因为splice可以在数组的任何位置进行删除/添加操作")]),v._v(" "),_("p",[_("strong",[v._v("vm."),_("code",[v._v("$set")]),v._v(" 的实现原理是：")])]),v._v(" "),_("ul",[_("li",[v._v("如果目标是数组，直接使用数组的 splice 方法触发相应式；")]),v._v(" "),_("li",[v._v("如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）")])]),v._v(" "),_("h2",{attrs:{id:"_32-assets和static的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_32-assets和static的区别"}},[v._v("#")]),v._v(" "),_("strong",[v._v("32. assets和static的区别")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("相同点：")]),v._v(" "),_("code",[v._v("assets")]),v._v(" 和 "),_("code",[v._v("static")]),v._v(" 两个都是存放静态资源文件。项目中所需要的资源文件图片，字体图标，样式文件等都可以放在这两个文件下，这是相同点")]),v._v(" "),_("li",[_("strong",[v._v("不相同点：")]),v._v(" "),_("code",[v._v("assets")]),v._v(" 中存放的静态资源文件在项目打包时，也就是运行 "),_("code",[v._v("npm run build")]),v._v(" 时会将 "),_("code",[v._v("assets")]),v._v(" 中放置的静态资源文件进行打包上传，所谓打包简单点可以理解为压缩体积，代码格式化。而压缩后的静态资源文件最终也都会放置在 "),_("code",[v._v("static")]),v._v(" 文件中跟着 "),_("code",[v._v("index.html")]),v._v(" 一同上传至服务器。"),_("code",[v._v("static")]),v._v(" 中放置的静态资源文件就不会要走打包压缩格式化等流程，而是直接进入打包好的目录，直接上传至服务器。因为避免了压缩直接进行上传，在打包时会提高一定的效率，但是 "),_("code",[v._v("static")]),v._v(" 中的资源文件由于没有进行压缩等操作，所以文件的体积也就相对于 "),_("code",[v._v("assets")]),v._v(" 中打包后的文件提交较大点。在服务器中就会占据更大的空间。")]),v._v(" "),_("li",[_("strong",[v._v("建议：")]),v._v(" 将项目中 "),_("code",[v._v("template")]),v._v("需要的样式文件js文件等都可以放置在 "),_("code",[v._v("assets")]),v._v(" 中，走打包这一流程。减少体积。而项目中引入的第三方的资源文件如"),_("code",[v._v("iconfoont.css")]),v._v(" 等文件可以放置在 "),_("code",[v._v("static")]),v._v(" 中，因为这些引入的第三方文件已经经过处理，不再需要处理，直接上传。")])]),v._v(" "),_("h2",{attrs:{id:"_33-vue的性能优化-项目优化-有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_33-vue的性能优化-项目优化-有哪些"}},[v._v("#")]),v._v(" 33. Vue的性能优化(项目优化)有哪些")]),v._v(" "),_("h3",{attrs:{id:"_1-编码阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-编码阶段"}},[v._v("#")]),v._v(" "),_("strong",[v._v("（1）编码阶段")])]),v._v(" "),_("ul",[_("li",[v._v("尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher")]),v._v(" "),_("li",[v._v("v-if和v-for不能连用")]),v._v(" "),_("li",[v._v("如果需要使用v-for给每项元素绑定事件时使用事件代理")]),v._v(" "),_("li",[v._v("SPA 页面采用keep-alive缓存组件")]),v._v(" "),_("li",[v._v("在更多的情况下，使用v-if替代v-show")]),v._v(" "),_("li",[v._v("key保证唯一")]),v._v(" "),_("li",[v._v("使用路由懒加载、异步组件")]),v._v(" "),_("li",[v._v("防抖、节流")]),v._v(" "),_("li",[v._v("第三方模块按需导入")]),v._v(" "),_("li",[v._v("长列表滚动到可视区域动态加载")]),v._v(" "),_("li",[v._v("图片懒加载")])]),v._v(" "),_("h3",{attrs:{id:"_2-seo优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-seo优化"}},[v._v("#")]),v._v(" "),_("strong",[v._v("（2）SEO优化")])]),v._v(" "),_("ul",[_("li",[v._v("预渲染")]),v._v(" "),_("li",[v._v("服务端渲染SSR")])]),v._v(" "),_("h3",{attrs:{id:"_3-打包优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-打包优化"}},[v._v("#")]),v._v(" "),_("strong",[v._v("（3）打包优化")])]),v._v(" "),_("ul",[_("li",[v._v("压缩代码")]),v._v(" "),_("li",[v._v("Tree Shaking/Scope Hoisting")]),v._v(" "),_("li",[v._v("使用cdn加载第三方模块")]),v._v(" "),_("li",[v._v("多线程打包happypack")]),v._v(" "),_("li",[v._v("splitChunks抽离公共文件")]),v._v(" "),_("li",[v._v("sourceMap优化")])]),v._v(" "),_("h3",{attrs:{id:"_4-用户体验"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-用户体验"}},[v._v("#")]),v._v(" "),_("strong",[v._v("（4）用户体验")])]),v._v(" "),_("ul",[_("li",[v._v("骨架屏")]),v._v(" "),_("li",[v._v("PWA")]),v._v(" "),_("li",[v._v("还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启gzip压缩等。")])]),v._v(" "),_("h2",{attrs:{id:"_34-vue的template模版编译原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_34-vue的template模版编译原理"}},[v._v("#")]),v._v(" 34. Vue的template模版编译原理")]),v._v(" "),_("p",[v._v("vue中的模板template无法被浏览器解析并渲染，因为这不属于浏览器的标准，不是正确的HTML语法，所有需要将template转化成一个JavaScript函数，这样浏览器就可以执行这一个函数并渲染出对应的HTML元素，就可以让视图跑起来了，这一个转化的过程，就成为模板编译。模板编译又分三个阶段，解析parse，优化optimize，生成generate，最终生成可执行函数render。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("解析阶段")]),v._v("：使用大量的正则表达式对template字符串进行解析，将标签、指令、属性等转化为抽象语法树AST。")]),v._v(" "),_("li",[_("strong",[v._v("优化阶段")]),v._v("：遍历AST，找到其中的一些静态节点并进行标记，方便在页面重渲染的时候进行diff比较时，直接跳过这一些静态节点，优化runtime的性能。")]),v._v(" "),_("li",[_("strong",[v._v("生成阶段")]),v._v("：将最终的AST转化为render函数字符串。")])]),v._v(" "),_("h2",{attrs:{id:"_35-template和jsx的有什么分别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_35-template和jsx的有什么分别"}},[v._v("#")]),v._v(" 35. template和jsx的有什么分别？")]),v._v(" "),_("p",[v._v("对于 runtime 来说，只需要保证组件存在 render 函数即可，而有了预编译之后，只需要保证构建过程中生成 render 函数就可以。在 webpack 中，使用"),_("code",[v._v("vue-loader")]),v._v("编译.vue文件，内部依赖的"),_("code",[v._v("vue-template-compiler")]),v._v("模块，在 webpack 构建过程中，将template预编译成 render 函数。与 react 类似，在添加了jsx的语法糖解析器"),_("code",[v._v("babel-plugin-transform-vue-jsx")]),v._v("之后，就可以直接手写render函数。")]),v._v(" "),_("p",[v._v("所以，"),_("strong",[v._v("template和jsx的都是render的一种表现形式")]),v._v("，不同的是：JSX相对于template而言，具有更高的灵活性，在复杂的组件中，更具有优势，而 template 虽然显得有些呆滞。但是 template 在代码结构上更符合视图与逻辑分离的习惯，更简单、更直观、更好维护。")]),v._v(" "),_("h2",{attrs:{id:"_35-2-讲讲什么是-jsx"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_35-2-讲讲什么是-jsx"}},[v._v("#")]),v._v(" 35.2 讲讲什么是 JSX ？")]),v._v(" "),_("p",[v._v("jsx是JavaScript的一种语法扩展，它跟模板语言很接近，但是它充分具备JavaScript的能力 当 Facebook 第一次发布 React 时，他们还引入了一种新的 JS 方言 JSX，将原始 HTML 模板嵌入到 JS 代码中。JSX 代码本身不能被浏览器读取，必须使用Babel和webpack等工具将其转换为传统的JS。 JSX中的标签可以是单标签，也可以是双标签，但必须保证标签是闭合的。")]),v._v(" "),_("h2",{attrs:{id:"_36-对ssr的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_36-对ssr的理解"}},[v._v("#")]),v._v(" 36. 对SSR的理解")]),v._v(" "),_("p",[v._v("SSR也就是服务端渲染，也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端")]),v._v(" "),_("p",[_("strong",[v._v("SSR的优势")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("更好的SEO")]),v._v(" "),_("li",[v._v("首屏加载速度更快")])]),v._v(" "),_("p",[_("strong",[v._v("SSR的缺点")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("开发条件会受到限制，服务器端渲染只支持beforeCreate和created两个钩子；")]),v._v(" "),_("li",[v._v("当需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于Node.js的运行环境；")]),v._v(" "),_("li",[v._v("更多的服务端负载。")])]),v._v(" "),_("h2",{attrs:{id:"_37-vue初始化页面闪动问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_37-vue初始化页面闪动问题"}},[v._v("#")]),v._v(" 37. vue初始化页面闪动问题")]),v._v(" "),_("p",[v._v("使用vue开发时，在vue初始化之前，由于div是不归vue管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于"+v._s(v.message)+"的字样，虽然一般情况下这个时间很短暂，但是还是有必要让解决这个问题的。")]),v._v(" "),_("p",[v._v("首先：在css里加上以下代码：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0a4cd18fa8432aaaa7ec5951c58836~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?",alt:"17.png"}})]),v._v(" "),_("p",[v._v("如果没有彻底解决问题，则在根元素加上"),_("code",[v._v('style="display: none;" :style="{display: \'block\'}"')])]),v._v(" "),_("h2",{attrs:{id:"_38-虚拟dom"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_38-虚拟dom"}},[v._v("#")]),v._v(" 38. 虚拟DOM")]),v._v(" "),_("h3",{attrs:{id:"_1-什么是虚拟dom"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是虚拟dom"}},[v._v("#")]),v._v(" (1). 什么是虚拟DOM")]),v._v(" "),_("p",[v._v("虚拟(Virtual) DOM 其实就是一棵以 JavaScript 对象（VNode 节点）作为基础的树，用对象属性来描述节点，"),_("strong",[v._v("相当于在js和真实dom中间加来一个缓存")]),v._v("，利用dom "),_("strong",[v._v("diff算法避免没有必要的dom操作")]),v._v("，从而提高性能。当然算法有时并不是最优解，因为它需要兼容很多实际中可能发生的情况，比如后续会讲到两个节点的dom树移动。")]),v._v(" "),_("p",[v._v("在vue中一般都是通过修改元素的state,订阅者根据state的变化进行编译渲染，底层的实现可以简单理解为三个步骤：")]),v._v(" "),_("ul",[_("li",[v._v("1、用JavaScript对象结构表述dom树的结构，然后用这个树构建一个真正的dom树，插到浏览器的页面中。")]),v._v(" "),_("li",[v._v("2、当状态改变了，也就是我们的state做出修改，vue便会重新构造一棵树的对象树，然后用这个新构建出来的树和旧树进行对比（只进行同层对比），记录两棵树之间的差异。")]),v._v(" "),_("li",[v._v("3、把记录的差异再重新应用到所构建的真正的dom树，视图就更新了。")])]),v._v(" "),_("p",[v._v("它的表达方式就是把每一个标签都转为一个对象，这个对象可以有三个属性："),_("code",[v._v("tag")]),v._v("、"),_("code",[v._v("props")]),v._v("、"),_("code",[v._v("children")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("tag")]),v._v("：必选。就是标签。也可以是组件，或者函数")]),v._v(" "),_("li",[_("strong",[v._v("props")]),v._v("：非必选。就是这个标签上的属性和方法")]),v._v(" "),_("li",[_("strong",[v._v("children")]),v._v("：非必选。就是这个标签的内容或者子节点，如果是文本节点就是字符串，如果有子节点就是数组。换句话说 如果判断 children 是字符串的话，就表示一定是文本节点，这个节点肯定没有子元素")])]),v._v(" "),_("h3",{attrs:{id:"_2-虚拟dom的解析过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟dom的解析过程"}},[v._v("#")]),v._v(" (2). 虚拟DOM的解析过程")]),v._v(" "),_("p",[v._v("虚拟DOM的解析过程：")]),v._v(" "),_("ul",[_("li",[v._v("首先对将要插入到文档中的 DOM 树结构进行分析，使用 js 对象将其表示出来，比如一个元素对象，包含 TagName、props 和 Children 这些属性。然后将这个 js 对象树给保存下来，最后再将 DOM 片段插入到文档中。")]),v._v(" "),_("li",[v._v("当页面的状态发生改变，需要对页面的 DOM 的结构进行调整的时候，首先根据变更的状态，重新构建起一棵对象树，然后将这棵新的对象树和旧的对象树进行比较，记录下两棵树的的差异。")]),v._v(" "),_("li",[v._v("最后将记录的有差异的地方应用到真正的 DOM 树中去，这样视图就更新了。")])]),v._v(" "),_("h3",{attrs:{id:"_3-为什么要用虚拟dom"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-为什么要用虚拟dom"}},[v._v("#")]),v._v(" (3). 为什么要用虚拟DOM")]),v._v(" "),_("p",[_("strong",[v._v("① 保证性能下限，在不进行手动优化的情况下，提供过得去的性能")]),v._v(" 看一下页面渲染的流程："),_("strong",[v._v("解析HTML -> 生成DOM -> 生成 CSSOM -> Layout -> Paint -> Compiler")]),v._v(" 下面对比一下修改DOM时真实DOM操作和Virtual DOM的过程，来看一下它们重排重绘的性能消耗∶")]),v._v(" "),_("ul",[_("li",[v._v("真实DOM∶ 生成HTML字符串＋重建所有的DOM元素")]),v._v(" "),_("li",[v._v("虚拟DOM∶ 生成vNode+ DOMDiff＋必要的dom更新")])]),v._v(" "),_("p",[v._v("Virtual DOM的更新DOM的准备工作耗费更多的时间，也就是JS层面，相比于更多的DOM操作它的消费是极其便宜的。尤雨溪在社区论坛中说道∶ 框架给你的保证是，你不需要手动优化的情况下，依然可以给你提供过得去的性能。")]),v._v(" "),_("p",[_("strong",[v._v("② 跨平台")]),v._v(" Virtual DOM本质上是JavaScript的对象，它可以很方便的跨平台操作，比如服务端渲染、uniapp等。")]),v._v(" "),_("h3",{attrs:{id:"_4-虚拟dom真的比真实dom性能好吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-虚拟dom真的比真实dom性能好吗"}},[v._v("#")]),v._v(" (4). 虚拟DOM真的比真实DOM性能好吗")]),v._v(" "),_("ul",[_("li",[v._v("首次渲染大量DOM时，由于多了一层虚拟DOM的计算，会比innerHTML插入慢。")]),v._v(" "),_("li",[v._v("正如它能保证性能下限，在真实DOM操作的时候进行针对性的优化时，还是更快的。")])]),v._v(" "),_("h2",{attrs:{id:"_39-diff算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_39-diff算法"}},[v._v("#")]),v._v(" 39. Diff算法")]),v._v(" "),_("p",[v._v("在新老虚拟DOM对比时：")]),v._v(" "),_("ul",[_("li",[v._v("首先，对比节点本身，"),_("strong",[v._v("判断是否为同一节点")]),v._v("，如果不为相同节点，则删除该节点重新创建节点进行替换")]),v._v(" "),_("li",[v._v("如果为相同节点，进行"),_("strong",[v._v("patchVnode")]),v._v("，判断如何对该节点的子节点进行处理，先判断一方有子节点一方没有子节点的情况(如果新的children没有子节点，将旧的子节点移除)")]),v._v(" "),_("li",[v._v("比较如果都有子节点，则进行"),_("strong",[v._v("updateChildren")]),v._v("，判断如何对这些新老节点的子节点进行操作（diff核心）。")]),v._v(" "),_("li",[v._v("匹配时，找到相同的子节点，递归比较子节点")])]),v._v(" "),_("p",[v._v("在diff中，只对同层的子节点进行比较，放弃跨级的节点比较，使得时间复杂从O(n3)降低值O(n)，也就是说，只有当新旧children都为多个子节点时才需要用核心的Diff算法进行同层级比较。")]),v._v(" "),_("h2",{attrs:{id:"_40-spa单页面应用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_40-spa单页面应用"}},[v._v("#")]),v._v(" 40. SPA单页面应用")]),v._v(" "),_("p",[_("strong",[v._v("概念：")])]),v._v(" "),_("ul",[_("li",[v._v("SPA单页面应用（SinglePage Web Application），指只有一个主页面的应用，一开始只需要加载一次js、css等相关资源。所有内容都包含在主页面，对每一个功能模块组件化。单页应用跳转，就是切换相关组件，仅仅刷新局部资源。")]),v._v(" "),_("li",[v._v("MPA多页面应用 （MultiPage Application），指有多个独立页面的应用，每个页面必须重复加载js、css等相关资源。多页应用跳转，需要整页资源刷新。")])]),v._v(" "),_("p",[_("strong",[v._v("单页应用优缺点")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("优点：")]),v._v(" "),_("ul",[_("li",[v._v("具有桌面应用的即时性、网站的可移植性和可访问性")]),v._v(" "),_("li",[v._v("用户体验好、快，内容的改变不需要重新加载整个页面")])])]),v._v(" "),_("li",[_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("首次渲染速度相对较慢")]),v._v(" "),_("li",[v._v("不利于搜索引擎的抓取")])])])]),v._v(" "),_("p",[_("strong",[v._v("解决首次加载慢的问题")])]),v._v(" "),_("div",{staticClass:"language-markdown line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-markdown"}},[_("code",[_("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("1.")]),v._v(" 减少入口文件体积\n"),_("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("2.")]),v._v(" 静态资源本地缓存\n"),_("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("3.")]),v._v(" UI框架按需加载\n"),_("span",{pre:!0,attrs:{class:"token list punctuation"}},[v._v("4.")]),v._v(" 路由懒加载\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])]),_("h2",{attrs:{id:"_41-使用异步组件有什么好处"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_41-使用异步组件有什么好处"}},[v._v("#")]),v._v(" 41. 使用异步组件有什么好处？")]),v._v(" "),_("ol",[_("li",[v._v("节省打包出的结果，异步组件分开打包，采用jsonp的方式进行加载，有效解决文件过大的问题。")]),v._v(" "),_("li",[v._v("核心就是包组件定义变成一个函数，依赖"),_("code",[v._v("import（）")]),v._v(" 语法，可以实现文件的分割加载。")])])])}),[],!1,null,null,null);_.default=a.exports}}]);